// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_change.proto

#include "config_change.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueRule_config_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnqueueRule_Change_config_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueueInfo_config_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueInfo_Change_config_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingRule_config_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingRule_Change_config_5fchange_2eproto;
class ConfigChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigChangeRequest> _instance;
  const ::EnqueueRule* enqueue_rule_;
  const ::RoutingRule* routing_rule_;
  const ::QueueInfo* queue_info_;
} _ConfigChangeRequest_default_instance_;
class EnqueueRule_ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueRule_Change> _instance;
} _EnqueueRule_Change_default_instance_;
class EnqueueRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueRule> _instance;
} _EnqueueRule_default_instance_;
class RoutingRule_ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingRule_Change> _instance;
} _RoutingRule_Change_default_instance_;
class RoutingRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingRule> _instance;
} _RoutingRule_default_instance_;
class QueueInfo_ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueInfo_Change> _instance;
} _QueueInfo_Change_default_instance_;
class QueueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueInfo> _instance;
} _QueueInfo_default_instance_;
static void InitDefaultsscc_info_ConfigChangeRequest_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigChangeRequest_default_instance_;
    new (ptr) ::ConfigChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigChangeRequest_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigChangeRequest_config_5fchange_2eproto}, {
      &scc_info_EnqueueRule_config_5fchange_2eproto.base,
      &scc_info_RoutingRule_config_5fchange_2eproto.base,
      &scc_info_QueueInfo_config_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueRule_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnqueueRule_default_instance_;
    new (ptr) ::EnqueueRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnqueueRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueRule_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnqueueRule_config_5fchange_2eproto}, {
      &scc_info_EnqueueRule_Change_config_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueRule_Change_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnqueueRule_Change_default_instance_;
    new (ptr) ::EnqueueRule_Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnqueueRule_Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnqueueRule_Change_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnqueueRule_Change_config_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_QueueInfo_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QueueInfo_default_instance_;
    new (ptr) ::QueueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QueueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueueInfo_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueueInfo_config_5fchange_2eproto}, {
      &scc_info_QueueInfo_Change_config_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_QueueInfo_Change_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QueueInfo_Change_default_instance_;
    new (ptr) ::QueueInfo_Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QueueInfo_Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueInfo_Change_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueInfo_Change_config_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_RoutingRule_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoutingRule_default_instance_;
    new (ptr) ::RoutingRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoutingRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingRule_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutingRule_config_5fchange_2eproto}, {
      &scc_info_RoutingRule_Change_config_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_RoutingRule_Change_config_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoutingRule_Change_default_instance_;
    new (ptr) ::RoutingRule_Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoutingRule_Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingRule_Change_config_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingRule_Change_config_5fchange_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_5fchange_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_5fchange_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_5fchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_5fchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ConfigChangeRequestDefaultTypeInternal, enqueue_rule_),
  offsetof(::ConfigChangeRequestDefaultTypeInternal, routing_rule_),
  offsetof(::ConfigChangeRequestDefaultTypeInternal, queue_info_),
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, reporter_),
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, ConfigType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnqueueRule_Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnqueueRule_Change, method_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRule_Change, queue_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRule_Change, features_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRule_Change, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnqueueRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnqueueRule, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoutingRule_Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoutingRule_Change, method_),
  PROTOBUF_FIELD_OFFSET(::RoutingRule_Change, queue_),
  PROTOBUF_FIELD_OFFSET(::RoutingRule_Change, possible_routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoutingRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoutingRule, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QueueInfo_Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QueueInfo_Change, method_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo_Change, queue_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo_Change, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QueueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QueueInfo, changes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConfigChangeRequest)},
  { 10, -1, sizeof(::EnqueueRule_Change)},
  { 19, -1, sizeof(::EnqueueRule)},
  { 25, -1, sizeof(::RoutingRule_Change)},
  { 33, -1, sizeof(::RoutingRule)},
  { 39, -1, sizeof(::QueueInfo_Change)},
  { 47, -1, sizeof(::QueueInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnqueueRule_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnqueueRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoutingRule_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoutingRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QueueInfo_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QueueInfo_default_instance_),
};

const char descriptor_table_protodef_config_5fchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023config_change.proto\"\243\001\n\023ConfigChangeRe"
  "quest\022$\n\014enqueue_rule\030\001 \001(\0132\014.EnqueueRul"
  "eH\000\022$\n\014routing_rule\030\002 \001(\0132\014.RoutingRuleH"
  "\000\022 \n\nqueue_info\030\003 \001(\0132\n.QueueInfoH\000\022\020\n\010r"
  "eporter\030\004 \001(\tB\014\n\nConfigType\"\200\001\n\013EnqueueR"
  "ule\022$\n\007changes\030\001 \003(\0132\023.EnqueueRule.Chang"
  "e\032K\n\006Change\022\016\n\006method\030\001 \001(\t\022\r\n\005queue\030\002 \001"
  "(\t\022\020\n\010features\030\003 \003(\t\022\020\n\010priority\030\004 \001(\005\"u"
  "\n\013RoutingRule\022$\n\007changes\030\004 \003(\0132\023.Routing"
  "Rule.Change\032@\n\006Change\022\016\n\006method\030\001 \001(\t\022\r\n"
  "\005queue\030\002 \001(\t\022\027\n\017possible_routes\030\003 \003(\t\"g\n"
  "\tQueueInfo\022\"\n\007changes\030\004 \003(\0132\021.QueueInfo."
  "Change\0326\n\006Change\022\016\n\006method\030\001 \001(\t\022\r\n\005queu"
  "e\030\002 \001(\t\022\r\n\005owner\030\003 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_5fchange_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_5fchange_2eproto_sccs[7] = {
  &scc_info_ConfigChangeRequest_config_5fchange_2eproto.base,
  &scc_info_EnqueueRule_config_5fchange_2eproto.base,
  &scc_info_EnqueueRule_Change_config_5fchange_2eproto.base,
  &scc_info_QueueInfo_config_5fchange_2eproto.base,
  &scc_info_QueueInfo_Change_config_5fchange_2eproto.base,
  &scc_info_RoutingRule_config_5fchange_2eproto.base,
  &scc_info_RoutingRule_Change_config_5fchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_5fchange_2eproto_once;
static bool descriptor_table_config_5fchange_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fchange_2eproto = {
  &descriptor_table_config_5fchange_2eproto_initialized, descriptor_table_protodef_config_5fchange_2eproto, "config_change.proto", 550,
  &descriptor_table_config_5fchange_2eproto_once, descriptor_table_config_5fchange_2eproto_sccs, descriptor_table_config_5fchange_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_config_5fchange_2eproto::offsets,
  file_level_metadata_config_5fchange_2eproto, 7, file_level_enum_descriptors_config_5fchange_2eproto, file_level_service_descriptors_config_5fchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_5fchange_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_5fchange_2eproto), true);

// ===================================================================

void ConfigChangeRequest::InitAsDefaultInstance() {
  ::_ConfigChangeRequest_default_instance_.enqueue_rule_ = const_cast< ::EnqueueRule*>(
      ::EnqueueRule::internal_default_instance());
  ::_ConfigChangeRequest_default_instance_.routing_rule_ = const_cast< ::RoutingRule*>(
      ::RoutingRule::internal_default_instance());
  ::_ConfigChangeRequest_default_instance_.queue_info_ = const_cast< ::QueueInfo*>(
      ::QueueInfo::internal_default_instance());
}
class ConfigChangeRequest::_Internal {
 public:
  static const ::EnqueueRule& enqueue_rule(const ConfigChangeRequest* msg);
  static const ::RoutingRule& routing_rule(const ConfigChangeRequest* msg);
  static const ::QueueInfo& queue_info(const ConfigChangeRequest* msg);
};

const ::EnqueueRule&
ConfigChangeRequest::_Internal::enqueue_rule(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.enqueue_rule_;
}
const ::RoutingRule&
ConfigChangeRequest::_Internal::routing_rule(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.routing_rule_;
}
const ::QueueInfo&
ConfigChangeRequest::_Internal::queue_info(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.queue_info_;
}
void ConfigChangeRequest::set_allocated_enqueue_rule(::EnqueueRule* enqueue_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (enqueue_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enqueue_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enqueue_rule, submessage_arena);
    }
    set_has_enqueue_rule();
    ConfigType_.enqueue_rule_ = enqueue_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.enqueue_rule)
}
void ConfigChangeRequest::set_allocated_routing_rule(::RoutingRule* routing_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (routing_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_rule, submessage_arena);
    }
    set_has_routing_rule();
    ConfigType_.routing_rule_ = routing_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.routing_rule)
}
void ConfigChangeRequest::set_allocated_queue_info(::QueueInfo* queue_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (queue_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_info, submessage_arena);
    }
    set_has_queue_info();
    ConfigType_.queue_info_ = queue_info;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.queue_info)
}
ConfigChangeRequest::ConfigChangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigChangeRequest)
}
ConfigChangeRequest::ConfigChangeRequest(const ConfigChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reporter().empty()) {
    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  clear_has_ConfigType();
  switch (from.ConfigType_case()) {
    case kEnqueueRule: {
      _internal_mutable_enqueue_rule()->::EnqueueRule::MergeFrom(from._internal_enqueue_rule());
      break;
    }
    case kRoutingRule: {
      _internal_mutable_routing_rule()->::RoutingRule::MergeFrom(from._internal_routing_rule());
      break;
    }
    case kQueueInfo: {
      _internal_mutable_queue_info()->::QueueInfo::MergeFrom(from._internal_queue_info());
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ConfigChangeRequest)
}

void ConfigChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigChangeRequest_config_5fchange_2eproto.base);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_ConfigType();
}

ConfigChangeRequest::~ConfigChangeRequest() {
  // @@protoc_insertion_point(destructor:ConfigChangeRequest)
  SharedDtor();
}

void ConfigChangeRequest::SharedDtor() {
  reporter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ConfigType()) {
    clear_ConfigType();
  }
}

void ConfigChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigChangeRequest& ConfigChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigChangeRequest_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void ConfigChangeRequest::clear_ConfigType() {
// @@protoc_insertion_point(one_of_clear_start:ConfigChangeRequest)
  switch (ConfigType_case()) {
    case kEnqueueRule: {
      delete ConfigType_.enqueue_rule_;
      break;
    }
    case kRoutingRule: {
      delete ConfigType_.routing_rule_;
      break;
    }
    case kQueueInfo: {
      delete ConfigType_.queue_info_;
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGTYPE_NOT_SET;
}


void ConfigChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_ConfigType();
  _internal_metadata_.Clear();
}

const char* ConfigChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .EnqueueRule enqueue_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enqueue_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoutingRule routing_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .QueueInfo queue_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reporter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reporter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigChangeRequest.reporter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EnqueueRule enqueue_rule = 1;
  if (_internal_has_enqueue_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enqueue_rule(this), target, stream);
  }

  // .RoutingRule routing_rule = 2;
  if (_internal_has_routing_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routing_rule(this), target, stream);
  }

  // .QueueInfo queue_info = 3;
  if (_internal_has_queue_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::queue_info(this), target, stream);
  }

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporter().data(), static_cast<int>(this->_internal_reporter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigChangeRequest.reporter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reporter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigChangeRequest)
  return target;
}

size_t ConfigChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporter());
  }

  switch (ConfigType_case()) {
    // .EnqueueRule enqueue_rule = 1;
    case kEnqueueRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.enqueue_rule_);
      break;
    }
    // .RoutingRule routing_rule = 2;
    case kRoutingRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.routing_rule_);
      break;
    }
    // .QueueInfo queue_info = 3;
    case kQueueInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.queue_info_);
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigChangeRequest)
    MergeFrom(*source);
  }
}

void ConfigChangeRequest::MergeFrom(const ConfigChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reporter().size() > 0) {

    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  switch (from.ConfigType_case()) {
    case kEnqueueRule: {
      _internal_mutable_enqueue_rule()->::EnqueueRule::MergeFrom(from._internal_enqueue_rule());
      break;
    }
    case kRoutingRule: {
      _internal_mutable_routing_rule()->::RoutingRule::MergeFrom(from._internal_routing_rule());
      break;
    }
    case kQueueInfo: {
      _internal_mutable_queue_info()->::QueueInfo::MergeFrom(from._internal_queue_info());
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
}

void ConfigChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigChangeRequest::CopyFrom(const ConfigChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigChangeRequest::IsInitialized() const {
  return true;
}

void ConfigChangeRequest::InternalSwap(ConfigChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reporter_.Swap(&other->reporter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ConfigType_, other->ConfigType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueRule_Change::InitAsDefaultInstance() {
}
class EnqueueRule_Change::_Internal {
 public:
};

EnqueueRule_Change::EnqueueRule_Change()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueRule.Change)
}
EnqueueRule_Change::EnqueueRule_Change(const EnqueueRule_Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue().empty()) {
    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:EnqueueRule.Change)
}

void EnqueueRule_Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueRule_Change_config_5fchange_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
}

EnqueueRule_Change::~EnqueueRule_Change() {
  // @@protoc_insertion_point(destructor:EnqueueRule.Change)
  SharedDtor();
}

void EnqueueRule_Change::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnqueueRule_Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueRule_Change& EnqueueRule_Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueRule_Change_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void EnqueueRule_Change::Clear() {
// @@protoc_insertion_point(message_clear_start:EnqueueRule.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  _internal_metadata_.Clear();
}

const char* EnqueueRule_Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRule.Change.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_queue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRule.Change.queue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRule.Change.features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueRule_Change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueRule.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRule.Change.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue().data(), static_cast<int>(this->_internal_queue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRule.Change.queue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_queue(), target);
  }

  // repeated string features = 3;
  for (int i = 0, n = this->_internal_features_size(); i < n; i++) {
    const auto& s = this->_internal_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRule.Change.features");
    target = stream->WriteString(3, s, target);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueRule.Change)
  return target;
}

size_t EnqueueRule_Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnqueueRule.Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string features = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(features_.size());
  for (int i = 0, n = features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      features_.Get(i));
  }

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRule_Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnqueueRule.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueRule_Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueRule_Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnqueueRule.Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnqueueRule.Change)
    MergeFrom(*source);
  }
}

void EnqueueRule_Change::MergeFrom(const EnqueueRule_Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnqueueRule.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.queue().size() > 0) {

    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void EnqueueRule_Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnqueueRule.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRule_Change::CopyFrom(const EnqueueRule_Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnqueueRule.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRule_Change::IsInitialized() const {
  return true;
}

void EnqueueRule_Change::InternalSwap(EnqueueRule_Change* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  queue_.Swap(&other->queue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRule_Change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueRule::InitAsDefaultInstance() {
}
class EnqueueRule::_Internal {
 public:
};

EnqueueRule::EnqueueRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueRule)
}
EnqueueRule::EnqueueRule(const EnqueueRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EnqueueRule)
}

void EnqueueRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueRule_config_5fchange_2eproto.base);
}

EnqueueRule::~EnqueueRule() {
  // @@protoc_insertion_point(destructor:EnqueueRule)
  SharedDtor();
}

void EnqueueRule::SharedDtor() {
}

void EnqueueRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueRule& EnqueueRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueRule_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void EnqueueRule::Clear() {
// @@protoc_insertion_point(message_clear_start:EnqueueRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  _internal_metadata_.Clear();
}

const char* EnqueueRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .EnqueueRule.Change changes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EnqueueRule.Change changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueRule)
  return target;
}

size_t EnqueueRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnqueueRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EnqueueRule.Change changes = 1;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnqueueRule)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnqueueRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnqueueRule)
    MergeFrom(*source);
  }
}

void EnqueueRule::MergeFrom(const EnqueueRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnqueueRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
}

void EnqueueRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnqueueRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRule::CopyFrom(const EnqueueRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnqueueRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRule::IsInitialized() const {
  return true;
}

void EnqueueRule::InternalSwap(EnqueueRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingRule_Change::InitAsDefaultInstance() {
}
class RoutingRule_Change::_Internal {
 public:
};

RoutingRule_Change::RoutingRule_Change()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoutingRule.Change)
}
RoutingRule_Change::RoutingRule_Change(const RoutingRule_Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      possible_routes_(from.possible_routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue().empty()) {
    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  // @@protoc_insertion_point(copy_constructor:RoutingRule.Change)
}

void RoutingRule_Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingRule_Change_config_5fchange_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoutingRule_Change::~RoutingRule_Change() {
  // @@protoc_insertion_point(destructor:RoutingRule.Change)
  SharedDtor();
}

void RoutingRule_Change::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoutingRule_Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingRule_Change& RoutingRule_Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingRule_Change_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void RoutingRule_Change::Clear() {
// @@protoc_insertion_point(message_clear_start:RoutingRule.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  possible_routes_.Clear();
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RoutingRule_Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingRule.Change.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_queue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingRule.Change.queue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string possible_routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_possible_routes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingRule.Change.possible_routes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingRule_Change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoutingRule.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingRule.Change.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue().data(), static_cast<int>(this->_internal_queue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingRule.Change.queue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_queue(), target);
  }

  // repeated string possible_routes = 3;
  for (int i = 0, n = this->_internal_possible_routes_size(); i < n; i++) {
    const auto& s = this->_internal_possible_routes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingRule.Change.possible_routes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoutingRule.Change)
  return target;
}

size_t RoutingRule_Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoutingRule.Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string possible_routes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(possible_routes_.size());
  for (int i = 0, n = possible_routes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      possible_routes_.Get(i));
  }

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingRule_Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoutingRule.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRule_Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingRule_Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoutingRule.Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoutingRule.Change)
    MergeFrom(*source);
  }
}

void RoutingRule_Change::MergeFrom(const RoutingRule_Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoutingRule.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  possible_routes_.MergeFrom(from.possible_routes_);
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.queue().size() > 0) {

    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
}

void RoutingRule_Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoutingRule.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRule_Change::CopyFrom(const RoutingRule_Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoutingRule.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRule_Change::IsInitialized() const {
  return true;
}

void RoutingRule_Change::InternalSwap(RoutingRule_Change* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  possible_routes_.InternalSwap(&other->possible_routes_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  queue_.Swap(&other->queue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingRule_Change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingRule::InitAsDefaultInstance() {
}
class RoutingRule::_Internal {
 public:
};

RoutingRule::RoutingRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoutingRule)
}
RoutingRule::RoutingRule(const RoutingRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RoutingRule)
}

void RoutingRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingRule_config_5fchange_2eproto.base);
}

RoutingRule::~RoutingRule() {
  // @@protoc_insertion_point(destructor:RoutingRule)
  SharedDtor();
}

void RoutingRule::SharedDtor() {
}

void RoutingRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingRule& RoutingRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingRule_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void RoutingRule::Clear() {
// @@protoc_insertion_point(message_clear_start:RoutingRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  _internal_metadata_.Clear();
}

const char* RoutingRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RoutingRule.Change changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoutingRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoutingRule.Change changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoutingRule)
  return target;
}

size_t RoutingRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoutingRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoutingRule.Change changes = 4;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoutingRule)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoutingRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoutingRule)
    MergeFrom(*source);
  }
}

void RoutingRule::MergeFrom(const RoutingRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoutingRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
}

void RoutingRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoutingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRule::CopyFrom(const RoutingRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoutingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRule::IsInitialized() const {
  return true;
}

void RoutingRule::InternalSwap(RoutingRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueInfo_Change::InitAsDefaultInstance() {
}
class QueueInfo_Change::_Internal {
 public:
};

QueueInfo_Change::QueueInfo_Change()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueueInfo.Change)
}
QueueInfo_Change::QueueInfo_Change(const QueueInfo_Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      owner_(from.owner_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue().empty()) {
    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  // @@protoc_insertion_point(copy_constructor:QueueInfo.Change)
}

void QueueInfo_Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueInfo_Change_config_5fchange_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueueInfo_Change::~QueueInfo_Change() {
  // @@protoc_insertion_point(destructor:QueueInfo.Change)
  SharedDtor();
}

void QueueInfo_Change::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueInfo_Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueInfo_Change& QueueInfo_Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueInfo_Change_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void QueueInfo_Change::Clear() {
// @@protoc_insertion_point(message_clear_start:QueueInfo.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.Clear();
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueueInfo_Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.Change.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_queue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.Change.queue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owner();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.Change.owner"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueInfo_Change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueueInfo.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.Change.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue().data(), static_cast<int>(this->_internal_queue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.Change.queue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_queue(), target);
  }

  // repeated string owner = 3;
  for (int i = 0, n = this->_internal_owner_size(); i < n; i++) {
    const auto& s = this->_internal_owner(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.Change.owner");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueueInfo.Change)
  return target;
}

size_t QueueInfo_Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueueInfo.Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string owner = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(owner_.size());
  for (int i = 0, n = owner_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      owner_.Get(i));
  }

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string queue = 2;
  if (this->queue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueInfo_Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueueInfo.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueInfo_Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueInfo_Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueueInfo.Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueueInfo.Change)
    MergeFrom(*source);
  }
}

void QueueInfo_Change::MergeFrom(const QueueInfo_Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueueInfo.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_.MergeFrom(from.owner_);
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.queue().size() > 0) {

    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
}

void QueueInfo_Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueueInfo.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueInfo_Change::CopyFrom(const QueueInfo_Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueueInfo.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueInfo_Change::IsInitialized() const {
  return true;
}

void QueueInfo_Change::InternalSwap(QueueInfo_Change* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.InternalSwap(&other->owner_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  queue_.Swap(&other->queue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueInfo_Change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueInfo::InitAsDefaultInstance() {
}
class QueueInfo::_Internal {
 public:
};

QueueInfo::QueueInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueueInfo)
}
QueueInfo::QueueInfo(const QueueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:QueueInfo)
}

void QueueInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueInfo_config_5fchange_2eproto.base);
}

QueueInfo::~QueueInfo() {
  // @@protoc_insertion_point(destructor:QueueInfo)
  SharedDtor();
}

void QueueInfo::SharedDtor() {
}

void QueueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueInfo& QueueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueInfo_config_5fchange_2eproto.base);
  return *internal_default_instance();
}


void QueueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:QueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  _internal_metadata_.Clear();
}

const char* QueueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .QueueInfo.Change changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .QueueInfo.Change changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueueInfo)
  return target;
}

size_t QueueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .QueueInfo.Change changes = 4;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueueInfo)
    MergeFrom(*source);
  }
}

void QueueInfo::MergeFrom(const QueueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
}

void QueueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueInfo::CopyFrom(const QueueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueInfo::IsInitialized() const {
  return true;
}

void QueueInfo::InternalSwap(QueueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConfigChangeRequest* Arena::CreateMaybeMessage< ::ConfigChangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnqueueRule_Change* Arena::CreateMaybeMessage< ::EnqueueRule_Change >(Arena* arena) {
  return Arena::CreateInternal< ::EnqueueRule_Change >(arena);
}
template<> PROTOBUF_NOINLINE ::EnqueueRule* Arena::CreateMaybeMessage< ::EnqueueRule >(Arena* arena) {
  return Arena::CreateInternal< ::EnqueueRule >(arena);
}
template<> PROTOBUF_NOINLINE ::RoutingRule_Change* Arena::CreateMaybeMessage< ::RoutingRule_Change >(Arena* arena) {
  return Arena::CreateInternal< ::RoutingRule_Change >(arena);
}
template<> PROTOBUF_NOINLINE ::RoutingRule* Arena::CreateMaybeMessage< ::RoutingRule >(Arena* arena) {
  return Arena::CreateInternal< ::RoutingRule >(arena);
}
template<> PROTOBUF_NOINLINE ::QueueInfo_Change* Arena::CreateMaybeMessage< ::QueueInfo_Change >(Arena* arena) {
  return Arena::CreateInternal< ::QueueInfo_Change >(arena);
}
template<> PROTOBUF_NOINLINE ::QueueInfo* Arena::CreateMaybeMessage< ::QueueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::QueueInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
