// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpp_subscriber/proto/config_change.proto

#include "config_change.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
class ConfigChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigChangeRequest> _instance;
  const ::EnqueueRules* enqueue_rules_;
  const ::RoutingTargets* routing_targets_;
  const ::QueueInfo* queue_info_;
} _ConfigChangeRequest_default_instance_;
class EnqueueRules_ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueRules_Change> _instance;
} _EnqueueRules_Change_default_instance_;
class EnqueueRulesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueRules> _instance;
} _EnqueueRules_default_instance_;
class RoutingTargetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingTargets> _instance;
} _RoutingTargets_default_instance_;
class QueueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueInfo> _instance;
} _QueueInfo_default_instance_;
static void InitDefaultsscc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigChangeRequest_default_instance_;
    new (ptr) ::ConfigChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto}, {
      &scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
      &scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
      &scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnqueueRules_default_instance_;
    new (ptr) ::EnqueueRules();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnqueueRules::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto}, {
      &scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnqueueRules_Change_default_instance_;
    new (ptr) ::EnqueueRules_Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnqueueRules_Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QueueInfo_default_instance_;
    new (ptr) ::QueueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QueueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoutingTargets_default_instance_;
    new (ptr) ::RoutingTargets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoutingTargets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ConfigChangeRequestDefaultTypeInternal, enqueue_rules_),
  offsetof(::ConfigChangeRequestDefaultTypeInternal, routing_targets_),
  offsetof(::ConfigChangeRequestDefaultTypeInternal, queue_info_),
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, config_type_),
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, issue_id_),
  PROTOBUF_FIELD_OFFSET(::ConfigChangeRequest, ConfigType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, method_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, reporter_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, queue_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, features_),
  PROTOBUF_FIELD_OFFSET(::EnqueueRules_Change, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnqueueRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnqueueRules, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, severity_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, found_in_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, in_prod_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, reporter_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, verifier_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, targeted_to_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, queue_id_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, add_queues_to_route_to_),
  PROTOBUF_FIELD_OFFSET(::RoutingTargets, remove_queues_to_route_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QueueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QueueInfo, severity_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, found_in_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, in_prod_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, reporter_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, verifier_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, targeted_to_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, queue_id_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, mdb_group_name_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, ops_owner_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, gvo_owner_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, tech_owner_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, is_dashboard_queue_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, reviews_per_item_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, fragment_name_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, item_expiry_sec_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, is_experimental_review_enabled_),
  PROTOBUF_FIELD_OFFSET(::QueueInfo, experimental_probability_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConfigChangeRequest)},
  { 11, -1, sizeof(::EnqueueRules_Change)},
  { 21, -1, sizeof(::EnqueueRules)},
  { 27, -1, sizeof(::RoutingTargets)},
  { 41, -1, sizeof(::QueueInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnqueueRules_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnqueueRules_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoutingTargets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QueueInfo_default_instance_),
};

const char descriptor_table_protodef_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(cpp_subscriber/proto/config_change.pro"
  "to\"\300\001\n\023ConfigChangeRequest\022&\n\renqueue_ru"
  "les\030\001 \001(\0132\r.EnqueueRulesH\000\022*\n\017routing_ta"
  "rgets\030\002 \001(\0132\017.RoutingTargetsH\000\022 \n\nqueue_"
  "info\030\003 \001(\0132\n.QueueInfoH\000\022\023\n\013config_type\030"
  "\004 \001(\t\022\020\n\010issue_id\030\005 \001(\tB\014\n\nConfigType\"\224\001"
  "\n\014EnqueueRules\022%\n\007changes\030\006 \003(\0132\024.Enqueu"
  "eRules.Change\032]\n\006Change\022\016\n\006method\030\001 \001(\t\022"
  "\020\n\010reporter\030\002 \001(\t\022\r\n\005queue\030\003 \001(\t\022\020\n\010feat"
  "ures\030\004 \003(\t\022\020\n\010priority\030\005 \001(\005\"\241\002\n\016Routing"
  "Targets\022*\n\010severity\030\001 \001(\0162\030.RoutingTarge"
  "ts.Severity\022\020\n\010found_in\030\002 \003(\t\022\017\n\007in_prod"
  "\030\003 \001(\010\022\020\n\010reporter\030\004 \001(\t\022\020\n\010verifier\030\005 \001"
  "(\t\022\023\n\013targeted_to\030\006 \003(\t\022\020\n\010queue_id\030\007 \001("
  "\003\022\036\n\026add_queues_to_route_to\030\010 \003(\003\022!\n\031rem"
  "ove_queues_to_route_to\030\t \003(\003\"2\n\010Severity"
  "\022\006\n\002S0\020\000\022\006\n\002S1\020\001\022\006\n\002S2\020\002\022\006\n\002S3\020\003\022\006\n\002S4\020\004"
  "\"\326\003\n\tQueueInfo\022%\n\010severity\030\001 \001(\0162\023.Queue"
  "Info.Severity\022\020\n\010found_in\030\002 \003(\t\022\017\n\007in_pr"
  "od\030\003 \001(\010\022\020\n\010reporter\030\004 \001(\t\022\020\n\010verifier\030\005"
  " \001(\t\022\023\n\013targeted_to\030\006 \003(\t\022\020\n\010queue_id\030\007 "
  "\001(\003\022\026\n\016mdb_group_name\030\010 \001(\t\022\021\n\tops_owner"
  "\030\t \001(\t\022\021\n\tgvo_owner\030\n \001(\t\022\022\n\ntech_owner\030"
  "\013 \001(\t\022\032\n\022is_dashboard_queue\030\014 \001(\010\022\030\n\020rev"
  "iews_per_item\030\r \001(\003\022\025\n\rfragment_name\030\016 \001"
  "(\t\022\027\n\017item_expiry_sec\030\017 \001(\003\022&\n\036is_experi"
  "mental_review_enabled\030\020 \001(\010\022 \n\030experimen"
  "tal_probability\030\021 \001(\003\"2\n\010Severity\022\006\n\002S0\020"
  "\000\022\006\n\002S1\020\001\022\006\n\002S2\020\002\022\006\n\002S3\020\003\022\006\n\002S4\020\004b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_sccs[5] = {
  &scc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
  &scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
  &scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
  &scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
  &scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_once;
static bool descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto = {
  &descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_initialized, descriptor_table_protodef_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto, "cpp_subscriber/proto/config_change.proto", 1161,
  &descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_once, descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_sccs, descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto::offsets,
  file_level_metadata_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto, 5, file_level_enum_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto, file_level_service_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingTargets_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
  return file_level_enum_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto[0];
}
bool RoutingTargets_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoutingTargets_Severity RoutingTargets::S0;
constexpr RoutingTargets_Severity RoutingTargets::S1;
constexpr RoutingTargets_Severity RoutingTargets::S2;
constexpr RoutingTargets_Severity RoutingTargets::S3;
constexpr RoutingTargets_Severity RoutingTargets::S4;
constexpr RoutingTargets_Severity RoutingTargets::Severity_MIN;
constexpr RoutingTargets_Severity RoutingTargets::Severity_MAX;
constexpr int RoutingTargets::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueueInfo_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
  return file_level_enum_descriptors_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto[1];
}
bool QueueInfo_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QueueInfo_Severity QueueInfo::S0;
constexpr QueueInfo_Severity QueueInfo::S1;
constexpr QueueInfo_Severity QueueInfo::S2;
constexpr QueueInfo_Severity QueueInfo::S3;
constexpr QueueInfo_Severity QueueInfo::S4;
constexpr QueueInfo_Severity QueueInfo::Severity_MIN;
constexpr QueueInfo_Severity QueueInfo::Severity_MAX;
constexpr int QueueInfo::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ConfigChangeRequest::InitAsDefaultInstance() {
  ::_ConfigChangeRequest_default_instance_.enqueue_rules_ = const_cast< ::EnqueueRules*>(
      ::EnqueueRules::internal_default_instance());
  ::_ConfigChangeRequest_default_instance_.routing_targets_ = const_cast< ::RoutingTargets*>(
      ::RoutingTargets::internal_default_instance());
  ::_ConfigChangeRequest_default_instance_.queue_info_ = const_cast< ::QueueInfo*>(
      ::QueueInfo::internal_default_instance());
}
class ConfigChangeRequest::_Internal {
 public:
  static const ::EnqueueRules& enqueue_rules(const ConfigChangeRequest* msg);
  static const ::RoutingTargets& routing_targets(const ConfigChangeRequest* msg);
  static const ::QueueInfo& queue_info(const ConfigChangeRequest* msg);
};

const ::EnqueueRules&
ConfigChangeRequest::_Internal::enqueue_rules(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.enqueue_rules_;
}
const ::RoutingTargets&
ConfigChangeRequest::_Internal::routing_targets(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.routing_targets_;
}
const ::QueueInfo&
ConfigChangeRequest::_Internal::queue_info(const ConfigChangeRequest* msg) {
  return *msg->ConfigType_.queue_info_;
}
void ConfigChangeRequest::set_allocated_enqueue_rules(::EnqueueRules* enqueue_rules) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (enqueue_rules) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enqueue_rules = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enqueue_rules, submessage_arena);
    }
    set_has_enqueue_rules();
    ConfigType_.enqueue_rules_ = enqueue_rules;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.enqueue_rules)
}
void ConfigChangeRequest::set_allocated_routing_targets(::RoutingTargets* routing_targets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (routing_targets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_targets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_targets, submessage_arena);
    }
    set_has_routing_targets();
    ConfigType_.routing_targets_ = routing_targets;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.routing_targets)
}
void ConfigChangeRequest::set_allocated_queue_info(::QueueInfo* queue_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ConfigType();
  if (queue_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_info, submessage_arena);
    }
    set_has_queue_info();
    ConfigType_.queue_info_ = queue_info;
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.queue_info)
}
ConfigChangeRequest::ConfigChangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigChangeRequest)
}
ConfigChangeRequest::ConfigChangeRequest(const ConfigChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_type().empty()) {
    config_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_type_);
  }
  issue_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issue_id().empty()) {
    issue_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issue_id_);
  }
  clear_has_ConfigType();
  switch (from.ConfigType_case()) {
    case kEnqueueRules: {
      _internal_mutable_enqueue_rules()->::EnqueueRules::MergeFrom(from._internal_enqueue_rules());
      break;
    }
    case kRoutingTargets: {
      _internal_mutable_routing_targets()->::RoutingTargets::MergeFrom(from._internal_routing_targets());
      break;
    }
    case kQueueInfo: {
      _internal_mutable_queue_info()->::QueueInfo::MergeFrom(from._internal_queue_info());
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ConfigChangeRequest)
}

void ConfigChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  config_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issue_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_ConfigType();
}

ConfigChangeRequest::~ConfigChangeRequest() {
  // @@protoc_insertion_point(destructor:ConfigChangeRequest)
  SharedDtor();
}

void ConfigChangeRequest::SharedDtor() {
  config_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issue_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ConfigType()) {
    clear_ConfigType();
  }
}

void ConfigChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigChangeRequest& ConfigChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigChangeRequest_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  return *internal_default_instance();
}


void ConfigChangeRequest::clear_ConfigType() {
// @@protoc_insertion_point(one_of_clear_start:ConfigChangeRequest)
  switch (ConfigType_case()) {
    case kEnqueueRules: {
      delete ConfigType_.enqueue_rules_;
      break;
    }
    case kRoutingTargets: {
      delete ConfigType_.routing_targets_;
      break;
    }
    case kQueueInfo: {
      delete ConfigType_.queue_info_;
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGTYPE_NOT_SET;
}


void ConfigChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issue_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_ConfigType();
  _internal_metadata_.Clear();
}

const char* ConfigChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .EnqueueRules enqueue_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enqueue_rules(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoutingTargets routing_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_targets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .QueueInfo queue_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_config_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigChangeRequest.config_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issue_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_issue_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigChangeRequest.issue_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EnqueueRules enqueue_rules = 1;
  if (_internal_has_enqueue_rules()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enqueue_rules(this), target, stream);
  }

  // .RoutingTargets routing_targets = 2;
  if (_internal_has_routing_targets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routing_targets(this), target, stream);
  }

  // .QueueInfo queue_info = 3;
  if (_internal_has_queue_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::queue_info(this), target, stream);
  }

  // string config_type = 4;
  if (this->config_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_type().data(), static_cast<int>(this->_internal_config_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigChangeRequest.config_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_config_type(), target);
  }

  // string issue_id = 5;
  if (this->issue_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issue_id().data(), static_cast<int>(this->_internal_issue_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigChangeRequest.issue_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_issue_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigChangeRequest)
  return target;
}

size_t ConfigChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_type = 4;
  if (this->config_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_type());
  }

  // string issue_id = 5;
  if (this->issue_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issue_id());
  }

  switch (ConfigType_case()) {
    // .EnqueueRules enqueue_rules = 1;
    case kEnqueueRules: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.enqueue_rules_);
      break;
    }
    // .RoutingTargets routing_targets = 2;
    case kRoutingTargets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.routing_targets_);
      break;
    }
    // .QueueInfo queue_info = 3;
    case kQueueInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ConfigType_.queue_info_);
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigChangeRequest)
    MergeFrom(*source);
  }
}

void ConfigChangeRequest::MergeFrom(const ConfigChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_type().size() > 0) {

    config_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_type_);
  }
  if (from.issue_id().size() > 0) {

    issue_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issue_id_);
  }
  switch (from.ConfigType_case()) {
    case kEnqueueRules: {
      _internal_mutable_enqueue_rules()->::EnqueueRules::MergeFrom(from._internal_enqueue_rules());
      break;
    }
    case kRoutingTargets: {
      _internal_mutable_routing_targets()->::RoutingTargets::MergeFrom(from._internal_routing_targets());
      break;
    }
    case kQueueInfo: {
      _internal_mutable_queue_info()->::QueueInfo::MergeFrom(from._internal_queue_info());
      break;
    }
    case CONFIGTYPE_NOT_SET: {
      break;
    }
  }
}

void ConfigChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigChangeRequest::CopyFrom(const ConfigChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigChangeRequest::IsInitialized() const {
  return true;
}

void ConfigChangeRequest::InternalSwap(ConfigChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_type_.Swap(&other->config_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issue_id_.Swap(&other->issue_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ConfigType_, other->ConfigType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueRules_Change::InitAsDefaultInstance() {
}
class EnqueueRules_Change::_Internal {
 public:
};

EnqueueRules_Change::EnqueueRules_Change()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueRules.Change)
}
EnqueueRules_Change::EnqueueRules_Change(const EnqueueRules_Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reporter().empty()) {
    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue().empty()) {
    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:EnqueueRules.Change)
}

void EnqueueRules_Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
}

EnqueueRules_Change::~EnqueueRules_Change() {
  // @@protoc_insertion_point(destructor:EnqueueRules.Change)
  SharedDtor();
}

void EnqueueRules_Change::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reporter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnqueueRules_Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueRules_Change& EnqueueRules_Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueRules_Change_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  return *internal_default_instance();
}


void EnqueueRules_Change::Clear() {
// @@protoc_insertion_point(message_clear_start:EnqueueRules.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  _internal_metadata_.Clear();
}

const char* EnqueueRules_Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRules.Change.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reporter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reporter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRules.Change.reporter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_queue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRules.Change.queue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnqueueRules.Change.features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueRules_Change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueRules.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRules.Change.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string reporter = 2;
  if (this->reporter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporter().data(), static_cast<int>(this->_internal_reporter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRules.Change.reporter");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reporter(), target);
  }

  // string queue = 3;
  if (this->queue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue().data(), static_cast<int>(this->_internal_queue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRules.Change.queue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_queue(), target);
  }

  // repeated string features = 4;
  for (int i = 0, n = this->_internal_features_size(); i < n; i++) {
    const auto& s = this->_internal_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnqueueRules.Change.features");
    target = stream->WriteString(4, s, target);
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueRules.Change)
  return target;
}

size_t EnqueueRules_Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnqueueRules.Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string features = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(features_.size());
  for (int i = 0, n = features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      features_.Get(i));
  }

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string reporter = 2;
  if (this->reporter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporter());
  }

  // string queue = 3;
  if (this->queue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue());
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRules_Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnqueueRules.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueRules_Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueRules_Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnqueueRules.Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnqueueRules.Change)
    MergeFrom(*source);
  }
}

void EnqueueRules_Change::MergeFrom(const EnqueueRules_Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnqueueRules.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.reporter().size() > 0) {

    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  if (from.queue().size() > 0) {

    queue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_);
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void EnqueueRules_Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnqueueRules.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRules_Change::CopyFrom(const EnqueueRules_Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnqueueRules.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRules_Change::IsInitialized() const {
  return true;
}

void EnqueueRules_Change::InternalSwap(EnqueueRules_Change* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reporter_.Swap(&other->reporter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  queue_.Swap(&other->queue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRules_Change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueRules::InitAsDefaultInstance() {
}
class EnqueueRules::_Internal {
 public:
};

EnqueueRules::EnqueueRules()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueRules)
}
EnqueueRules::EnqueueRules(const EnqueueRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EnqueueRules)
}

void EnqueueRules::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
}

EnqueueRules::~EnqueueRules() {
  // @@protoc_insertion_point(destructor:EnqueueRules)
  SharedDtor();
}

void EnqueueRules::SharedDtor() {
}

void EnqueueRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueRules& EnqueueRules::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueRules_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  return *internal_default_instance();
}


void EnqueueRules::Clear() {
// @@protoc_insertion_point(message_clear_start:EnqueueRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  _internal_metadata_.Clear();
}

const char* EnqueueRules::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .EnqueueRules.Change changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueRules::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EnqueueRules.Change changes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueRules)
  return target;
}

size_t EnqueueRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnqueueRules)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EnqueueRules.Change changes = 6;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRules::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnqueueRules)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueRules* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueRules>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnqueueRules)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnqueueRules)
    MergeFrom(*source);
  }
}

void EnqueueRules::MergeFrom(const EnqueueRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnqueueRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
}

void EnqueueRules::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnqueueRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRules::CopyFrom(const EnqueueRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnqueueRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRules::IsInitialized() const {
  return true;
}

void EnqueueRules::InternalSwap(EnqueueRules* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRules::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingTargets::InitAsDefaultInstance() {
}
class RoutingTargets::_Internal {
 public:
};

RoutingTargets::RoutingTargets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoutingTargets)
}
RoutingTargets::RoutingTargets(const RoutingTargets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      found_in_(from.found_in_),
      targeted_to_(from.targeted_to_),
      add_queues_to_route_to_(from.add_queues_to_route_to_),
      remove_queues_to_route_to_(from.remove_queues_to_route_to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reporter().empty()) {
    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  verifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_verifier().empty()) {
    verifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_id_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(queue_id_));
  // @@protoc_insertion_point(copy_constructor:RoutingTargets)
}

void RoutingTargets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_id_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(queue_id_));
}

RoutingTargets::~RoutingTargets() {
  // @@protoc_insertion_point(destructor:RoutingTargets)
  SharedDtor();
}

void RoutingTargets::SharedDtor() {
  reporter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoutingTargets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingTargets& RoutingTargets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingTargets_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  return *internal_default_instance();
}


void RoutingTargets::Clear() {
// @@protoc_insertion_point(message_clear_start:RoutingTargets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  found_in_.Clear();
  targeted_to_.Clear();
  add_queues_to_route_to_.Clear();
  remove_queues_to_route_to_.Clear();
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_id_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(queue_id_));
  _internal_metadata_.Clear();
}

const char* RoutingTargets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoutingTargets.Severity severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::RoutingTargets_Severity>(val));
        } else goto handle_unusual;
        continue;
      // repeated string found_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_found_in();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingTargets.found_in"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool in_prod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          in_prod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reporter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reporter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingTargets.reporter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string verifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_verifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingTargets.verifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string targeted_to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targeted_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoutingTargets.targeted_to"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 queue_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          queue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 add_queues_to_route_to = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_add_queues_to_route_to(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_add_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 remove_queues_to_route_to = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_remove_queues_to_route_to(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_remove_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingTargets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoutingTargets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoutingTargets.Severity severity = 1;
  if (this->severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // repeated string found_in = 2;
  for (int i = 0, n = this->_internal_found_in_size(); i < n; i++) {
    const auto& s = this->_internal_found_in(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingTargets.found_in");
    target = stream->WriteString(2, s, target);
  }

  // bool in_prod = 3;
  if (this->in_prod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_prod(), target);
  }

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporter().data(), static_cast<int>(this->_internal_reporter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingTargets.reporter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reporter(), target);
  }

  // string verifier = 5;
  if (this->verifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verifier().data(), static_cast<int>(this->_internal_verifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingTargets.verifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verifier(), target);
  }

  // repeated string targeted_to = 6;
  for (int i = 0, n = this->_internal_targeted_to_size(); i < n; i++) {
    const auto& s = this->_internal_targeted_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoutingTargets.targeted_to");
    target = stream->WriteString(6, s, target);
  }

  // int64 queue_id = 7;
  if (this->queue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_queue_id(), target);
  }

  // repeated int64 add_queues_to_route_to = 8;
  {
    int byte_size = _add_queues_to_route_to_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_add_queues_to_route_to(), byte_size, target);
    }
  }

  // repeated int64 remove_queues_to_route_to = 9;
  {
    int byte_size = _remove_queues_to_route_to_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_remove_queues_to_route_to(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoutingTargets)
  return target;
}

size_t RoutingTargets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoutingTargets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string found_in = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(found_in_.size());
  for (int i = 0, n = found_in_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      found_in_.Get(i));
  }

  // repeated string targeted_to = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targeted_to_.size());
  for (int i = 0, n = targeted_to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targeted_to_.Get(i));
  }

  // repeated int64 add_queues_to_route_to = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->add_queues_to_route_to_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _add_queues_to_route_to_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 remove_queues_to_route_to = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->remove_queues_to_route_to_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _remove_queues_to_route_to_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporter());
  }

  // string verifier = 5;
  if (this->verifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verifier());
  }

  // .RoutingTargets.Severity severity = 1;
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // bool in_prod = 3;
  if (this->in_prod() != 0) {
    total_size += 1 + 1;
  }

  // int64 queue_id = 7;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_queue_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingTargets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoutingTargets)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingTargets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingTargets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoutingTargets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoutingTargets)
    MergeFrom(*source);
  }
}

void RoutingTargets::MergeFrom(const RoutingTargets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoutingTargets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  found_in_.MergeFrom(from.found_in_);
  targeted_to_.MergeFrom(from.targeted_to_);
  add_queues_to_route_to_.MergeFrom(from.add_queues_to_route_to_);
  remove_queues_to_route_to_.MergeFrom(from.remove_queues_to_route_to_);
  if (from.reporter().size() > 0) {

    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  if (from.verifier().size() > 0) {

    verifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.in_prod() != 0) {
    _internal_set_in_prod(from._internal_in_prod());
  }
  if (from.queue_id() != 0) {
    _internal_set_queue_id(from._internal_queue_id());
  }
}

void RoutingTargets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoutingTargets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingTargets::CopyFrom(const RoutingTargets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoutingTargets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTargets::IsInitialized() const {
  return true;
}

void RoutingTargets::InternalSwap(RoutingTargets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  found_in_.InternalSwap(&other->found_in_);
  targeted_to_.InternalSwap(&other->targeted_to_);
  add_queues_to_route_to_.InternalSwap(&other->add_queues_to_route_to_);
  remove_queues_to_route_to_.InternalSwap(&other->remove_queues_to_route_to_);
  reporter_.Swap(&other->reporter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verifier_.Swap(&other->verifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
  swap(in_prod_, other->in_prod_);
  swap(queue_id_, other->queue_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTargets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueInfo::InitAsDefaultInstance() {
}
class QueueInfo::_Internal {
 public:
};

QueueInfo::QueueInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueueInfo)
}
QueueInfo::QueueInfo(const QueueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      found_in_(from.found_in_),
      targeted_to_(from.targeted_to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reporter().empty()) {
    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  verifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_verifier().empty()) {
    verifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  mdb_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdb_group_name().empty()) {
    mdb_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mdb_group_name_);
  }
  ops_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ops_owner().empty()) {
    ops_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ops_owner_);
  }
  gvo_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gvo_owner().empty()) {
    gvo_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gvo_owner_);
  }
  tech_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tech_owner().empty()) {
    tech_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tech_owner_);
  }
  fragment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fragment_name().empty()) {
    fragment_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fragment_name_);
  }
  ::memcpy(&queue_id_, &from.queue_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&experimental_probability_) -
    reinterpret_cast<char*>(&queue_id_)) + sizeof(experimental_probability_));
  // @@protoc_insertion_point(copy_constructor:QueueInfo)
}

void QueueInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  reporter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdb_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ops_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvo_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tech_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&experimental_probability_) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(experimental_probability_));
}

QueueInfo::~QueueInfo() {
  // @@protoc_insertion_point(destructor:QueueInfo)
  SharedDtor();
}

void QueueInfo::SharedDtor() {
  reporter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdb_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ops_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvo_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tech_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueInfo& QueueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueInfo_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.base);
  return *internal_default_instance();
}


void QueueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:QueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  found_in_.Clear();
  targeted_to_.Clear();
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdb_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ops_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvo_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tech_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&experimental_probability_) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(experimental_probability_));
  _internal_metadata_.Clear();
}

const char* QueueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .QueueInfo.Severity severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::QueueInfo_Severity>(val));
        } else goto handle_unusual;
        continue;
      // repeated string found_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_found_in();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.found_in"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool in_prod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          in_prod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reporter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reporter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.reporter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string verifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_verifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.verifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string targeted_to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targeted_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.targeted_to"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 queue_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          queue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdb_group_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mdb_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.mdb_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ops_owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ops_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.ops_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gvo_owner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gvo_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.gvo_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tech_owner = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_tech_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.tech_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dashboard_queue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_dashboard_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reviews_per_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          reviews_per_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fragment_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_fragment_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QueueInfo.fragment_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 item_expiry_sec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          item_expiry_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_experimental_review_enabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          is_experimental_review_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 experimental_probability = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          experimental_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .QueueInfo.Severity severity = 1;
  if (this->severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // repeated string found_in = 2;
  for (int i = 0, n = this->_internal_found_in_size(); i < n; i++) {
    const auto& s = this->_internal_found_in(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.found_in");
    target = stream->WriteString(2, s, target);
  }

  // bool in_prod = 3;
  if (this->in_prod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_prod(), target);
  }

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporter().data(), static_cast<int>(this->_internal_reporter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.reporter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reporter(), target);
  }

  // string verifier = 5;
  if (this->verifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verifier().data(), static_cast<int>(this->_internal_verifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.verifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verifier(), target);
  }

  // repeated string targeted_to = 6;
  for (int i = 0, n = this->_internal_targeted_to_size(); i < n; i++) {
    const auto& s = this->_internal_targeted_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.targeted_to");
    target = stream->WriteString(6, s, target);
  }

  // int64 queue_id = 7;
  if (this->queue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_queue_id(), target);
  }

  // string mdb_group_name = 8;
  if (this->mdb_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdb_group_name().data(), static_cast<int>(this->_internal_mdb_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.mdb_group_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mdb_group_name(), target);
  }

  // string ops_owner = 9;
  if (this->ops_owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ops_owner().data(), static_cast<int>(this->_internal_ops_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.ops_owner");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ops_owner(), target);
  }

  // string gvo_owner = 10;
  if (this->gvo_owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gvo_owner().data(), static_cast<int>(this->_internal_gvo_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.gvo_owner");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gvo_owner(), target);
  }

  // string tech_owner = 11;
  if (this->tech_owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tech_owner().data(), static_cast<int>(this->_internal_tech_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.tech_owner");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_tech_owner(), target);
  }

  // bool is_dashboard_queue = 12;
  if (this->is_dashboard_queue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_dashboard_queue(), target);
  }

  // int64 reviews_per_item = 13;
  if (this->reviews_per_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_reviews_per_item(), target);
  }

  // string fragment_name = 14;
  if (this->fragment_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fragment_name().data(), static_cast<int>(this->_internal_fragment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QueueInfo.fragment_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_fragment_name(), target);
  }

  // int64 item_expiry_sec = 15;
  if (this->item_expiry_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_item_expiry_sec(), target);
  }

  // bool is_experimental_review_enabled = 16;
  if (this->is_experimental_review_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_experimental_review_enabled(), target);
  }

  // int64 experimental_probability = 17;
  if (this->experimental_probability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_experimental_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueueInfo)
  return target;
}

size_t QueueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string found_in = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(found_in_.size());
  for (int i = 0, n = found_in_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      found_in_.Get(i));
  }

  // repeated string targeted_to = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targeted_to_.size());
  for (int i = 0, n = targeted_to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targeted_to_.Get(i));
  }

  // string reporter = 4;
  if (this->reporter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporter());
  }

  // string verifier = 5;
  if (this->verifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verifier());
  }

  // string mdb_group_name = 8;
  if (this->mdb_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdb_group_name());
  }

  // string ops_owner = 9;
  if (this->ops_owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ops_owner());
  }

  // string gvo_owner = 10;
  if (this->gvo_owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gvo_owner());
  }

  // string tech_owner = 11;
  if (this->tech_owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tech_owner());
  }

  // string fragment_name = 14;
  if (this->fragment_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fragment_name());
  }

  // int64 queue_id = 7;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_queue_id());
  }

  // .QueueInfo.Severity severity = 1;
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // bool in_prod = 3;
  if (this->in_prod() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dashboard_queue = 12;
  if (this->is_dashboard_queue() != 0) {
    total_size += 1 + 1;
  }

  // bool is_experimental_review_enabled = 16;
  if (this->is_experimental_review_enabled() != 0) {
    total_size += 2 + 1;
  }

  // int64 reviews_per_item = 13;
  if (this->reviews_per_item() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reviews_per_item());
  }

  // int64 item_expiry_sec = 15;
  if (this->item_expiry_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_item_expiry_sec());
  }

  // int64 experimental_probability = 17;
  if (this->experimental_probability() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_experimental_probability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueueInfo)
    MergeFrom(*source);
  }
}

void QueueInfo::MergeFrom(const QueueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  found_in_.MergeFrom(from.found_in_);
  targeted_to_.MergeFrom(from.targeted_to_);
  if (from.reporter().size() > 0) {

    reporter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reporter_);
  }
  if (from.verifier().size() > 0) {

    verifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  if (from.mdb_group_name().size() > 0) {

    mdb_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mdb_group_name_);
  }
  if (from.ops_owner().size() > 0) {

    ops_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ops_owner_);
  }
  if (from.gvo_owner().size() > 0) {

    gvo_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gvo_owner_);
  }
  if (from.tech_owner().size() > 0) {

    tech_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tech_owner_);
  }
  if (from.fragment_name().size() > 0) {

    fragment_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fragment_name_);
  }
  if (from.queue_id() != 0) {
    _internal_set_queue_id(from._internal_queue_id());
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.in_prod() != 0) {
    _internal_set_in_prod(from._internal_in_prod());
  }
  if (from.is_dashboard_queue() != 0) {
    _internal_set_is_dashboard_queue(from._internal_is_dashboard_queue());
  }
  if (from.is_experimental_review_enabled() != 0) {
    _internal_set_is_experimental_review_enabled(from._internal_is_experimental_review_enabled());
  }
  if (from.reviews_per_item() != 0) {
    _internal_set_reviews_per_item(from._internal_reviews_per_item());
  }
  if (from.item_expiry_sec() != 0) {
    _internal_set_item_expiry_sec(from._internal_item_expiry_sec());
  }
  if (from.experimental_probability() != 0) {
    _internal_set_experimental_probability(from._internal_experimental_probability());
  }
}

void QueueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueInfo::CopyFrom(const QueueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueInfo::IsInitialized() const {
  return true;
}

void QueueInfo::InternalSwap(QueueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  found_in_.InternalSwap(&other->found_in_);
  targeted_to_.InternalSwap(&other->targeted_to_);
  reporter_.Swap(&other->reporter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verifier_.Swap(&other->verifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mdb_group_name_.Swap(&other->mdb_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ops_owner_.Swap(&other->ops_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gvo_owner_.Swap(&other->gvo_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tech_owner_.Swap(&other->tech_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fragment_name_.Swap(&other->fragment_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(queue_id_, other->queue_id_);
  swap(severity_, other->severity_);
  swap(in_prod_, other->in_prod_);
  swap(is_dashboard_queue_, other->is_dashboard_queue_);
  swap(is_experimental_review_enabled_, other->is_experimental_review_enabled_);
  swap(reviews_per_item_, other->reviews_per_item_);
  swap(item_expiry_sec_, other->item_expiry_sec_);
  swap(experimental_probability_, other->experimental_probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConfigChangeRequest* Arena::CreateMaybeMessage< ::ConfigChangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnqueueRules_Change* Arena::CreateMaybeMessage< ::EnqueueRules_Change >(Arena* arena) {
  return Arena::CreateInternal< ::EnqueueRules_Change >(arena);
}
template<> PROTOBUF_NOINLINE ::EnqueueRules* Arena::CreateMaybeMessage< ::EnqueueRules >(Arena* arena) {
  return Arena::CreateInternal< ::EnqueueRules >(arena);
}
template<> PROTOBUF_NOINLINE ::RoutingTargets* Arena::CreateMaybeMessage< ::RoutingTargets >(Arena* arena) {
  return Arena::CreateInternal< ::RoutingTargets >(arena);
}
template<> PROTOBUF_NOINLINE ::QueueInfo* Arena::CreateMaybeMessage< ::QueueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::QueueInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
