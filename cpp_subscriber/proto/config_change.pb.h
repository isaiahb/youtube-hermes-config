// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpp_subscriber/proto/config_change.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
class ConfigChangeRequest;
class ConfigChangeRequestDefaultTypeInternal;
extern ConfigChangeRequestDefaultTypeInternal _ConfigChangeRequest_default_instance_;
class EnqueueRules;
class EnqueueRulesDefaultTypeInternal;
extern EnqueueRulesDefaultTypeInternal _EnqueueRules_default_instance_;
class EnqueueRules_Change;
class EnqueueRules_ChangeDefaultTypeInternal;
extern EnqueueRules_ChangeDefaultTypeInternal _EnqueueRules_Change_default_instance_;
class QueueInfo;
class QueueInfoDefaultTypeInternal;
extern QueueInfoDefaultTypeInternal _QueueInfo_default_instance_;
class RoutingTargets;
class RoutingTargetsDefaultTypeInternal;
extern RoutingTargetsDefaultTypeInternal _RoutingTargets_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigChangeRequest* Arena::CreateMaybeMessage<::ConfigChangeRequest>(Arena*);
template<> ::EnqueueRules* Arena::CreateMaybeMessage<::EnqueueRules>(Arena*);
template<> ::EnqueueRules_Change* Arena::CreateMaybeMessage<::EnqueueRules_Change>(Arena*);
template<> ::QueueInfo* Arena::CreateMaybeMessage<::QueueInfo>(Arena*);
template<> ::RoutingTargets* Arena::CreateMaybeMessage<::RoutingTargets>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RoutingTargets_Severity : int {
  RoutingTargets_Severity_S0 = 0,
  RoutingTargets_Severity_S1 = 1,
  RoutingTargets_Severity_S2 = 2,
  RoutingTargets_Severity_S3 = 3,
  RoutingTargets_Severity_S4 = 4,
  RoutingTargets_Severity_RoutingTargets_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoutingTargets_Severity_RoutingTargets_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoutingTargets_Severity_IsValid(int value);
constexpr RoutingTargets_Severity RoutingTargets_Severity_Severity_MIN = RoutingTargets_Severity_S0;
constexpr RoutingTargets_Severity RoutingTargets_Severity_Severity_MAX = RoutingTargets_Severity_S4;
constexpr int RoutingTargets_Severity_Severity_ARRAYSIZE = RoutingTargets_Severity_Severity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingTargets_Severity_descriptor();
template<typename T>
inline const std::string& RoutingTargets_Severity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoutingTargets_Severity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoutingTargets_Severity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoutingTargets_Severity_descriptor(), enum_t_value);
}
inline bool RoutingTargets_Severity_Parse(
    const std::string& name, RoutingTargets_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoutingTargets_Severity>(
    RoutingTargets_Severity_descriptor(), name, value);
}
enum QueueInfo_Severity : int {
  QueueInfo_Severity_S0 = 0,
  QueueInfo_Severity_S1 = 1,
  QueueInfo_Severity_S2 = 2,
  QueueInfo_Severity_S3 = 3,
  QueueInfo_Severity_S4 = 4,
  QueueInfo_Severity_QueueInfo_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QueueInfo_Severity_QueueInfo_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QueueInfo_Severity_IsValid(int value);
constexpr QueueInfo_Severity QueueInfo_Severity_Severity_MIN = QueueInfo_Severity_S0;
constexpr QueueInfo_Severity QueueInfo_Severity_Severity_MAX = QueueInfo_Severity_S4;
constexpr int QueueInfo_Severity_Severity_ARRAYSIZE = QueueInfo_Severity_Severity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueueInfo_Severity_descriptor();
template<typename T>
inline const std::string& QueueInfo_Severity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueueInfo_Severity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueueInfo_Severity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueueInfo_Severity_descriptor(), enum_t_value);
}
inline bool QueueInfo_Severity_Parse(
    const std::string& name, QueueInfo_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueueInfo_Severity>(
    QueueInfo_Severity_descriptor(), name, value);
}
// ===================================================================

class ConfigChangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigChangeRequest) */ {
 public:
  ConfigChangeRequest();
  virtual ~ConfigChangeRequest();

  ConfigChangeRequest(const ConfigChangeRequest& from);
  ConfigChangeRequest(ConfigChangeRequest&& from) noexcept
    : ConfigChangeRequest() {
    *this = ::std::move(from);
  }

  inline ConfigChangeRequest& operator=(const ConfigChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigChangeRequest& operator=(ConfigChangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigChangeRequest& default_instance();

  enum ConfigTypeCase {
    kEnqueueRules = 1,
    kRoutingTargets = 2,
    kQueueInfo = 3,
    CONFIGTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigChangeRequest*>(
               &_ConfigChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigChangeRequest& a, ConfigChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigChangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigChangeRequest* New() const final {
    return CreateMaybeMessage<ConfigChangeRequest>(nullptr);
  }

  ConfigChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigChangeRequest& from);
  void MergeFrom(const ConfigChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigChangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
    return ::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigTypeFieldNumber = 4,
    kIssueIdFieldNumber = 5,
    kEnqueueRulesFieldNumber = 1,
    kRoutingTargetsFieldNumber = 2,
    kQueueInfoFieldNumber = 3,
  };
  // string config_type = 4;
  void clear_config_type();
  const std::string& config_type() const;
  void set_config_type(const std::string& value);
  void set_config_type(std::string&& value);
  void set_config_type(const char* value);
  void set_config_type(const char* value, size_t size);
  std::string* mutable_config_type();
  std::string* release_config_type();
  void set_allocated_config_type(std::string* config_type);
  private:
  const std::string& _internal_config_type() const;
  void _internal_set_config_type(const std::string& value);
  std::string* _internal_mutable_config_type();
  public:

  // string issue_id = 5;
  void clear_issue_id();
  const std::string& issue_id() const;
  void set_issue_id(const std::string& value);
  void set_issue_id(std::string&& value);
  void set_issue_id(const char* value);
  void set_issue_id(const char* value, size_t size);
  std::string* mutable_issue_id();
  std::string* release_issue_id();
  void set_allocated_issue_id(std::string* issue_id);
  private:
  const std::string& _internal_issue_id() const;
  void _internal_set_issue_id(const std::string& value);
  std::string* _internal_mutable_issue_id();
  public:

  // .EnqueueRules enqueue_rules = 1;
  bool has_enqueue_rules() const;
  private:
  bool _internal_has_enqueue_rules() const;
  public:
  void clear_enqueue_rules();
  const ::EnqueueRules& enqueue_rules() const;
  ::EnqueueRules* release_enqueue_rules();
  ::EnqueueRules* mutable_enqueue_rules();
  void set_allocated_enqueue_rules(::EnqueueRules* enqueue_rules);
  private:
  const ::EnqueueRules& _internal_enqueue_rules() const;
  ::EnqueueRules* _internal_mutable_enqueue_rules();
  public:

  // .RoutingTargets routing_targets = 2;
  bool has_routing_targets() const;
  private:
  bool _internal_has_routing_targets() const;
  public:
  void clear_routing_targets();
  const ::RoutingTargets& routing_targets() const;
  ::RoutingTargets* release_routing_targets();
  ::RoutingTargets* mutable_routing_targets();
  void set_allocated_routing_targets(::RoutingTargets* routing_targets);
  private:
  const ::RoutingTargets& _internal_routing_targets() const;
  ::RoutingTargets* _internal_mutable_routing_targets();
  public:

  // .QueueInfo queue_info = 3;
  bool has_queue_info() const;
  private:
  bool _internal_has_queue_info() const;
  public:
  void clear_queue_info();
  const ::QueueInfo& queue_info() const;
  ::QueueInfo* release_queue_info();
  ::QueueInfo* mutable_queue_info();
  void set_allocated_queue_info(::QueueInfo* queue_info);
  private:
  const ::QueueInfo& _internal_queue_info() const;
  ::QueueInfo* _internal_mutable_queue_info();
  public:

  void clear_ConfigType();
  ConfigTypeCase ConfigType_case() const;
  // @@protoc_insertion_point(class_scope:ConfigChangeRequest)
 private:
  class _Internal;
  void set_has_enqueue_rules();
  void set_has_routing_targets();
  void set_has_queue_info();

  inline bool has_ConfigType() const;
  inline void clear_has_ConfigType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issue_id_;
  union ConfigTypeUnion {
    ConfigTypeUnion() {}
    ::EnqueueRules* enqueue_rules_;
    ::RoutingTargets* routing_targets_;
    ::QueueInfo* queue_info_;
  } ConfigType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
};
// -------------------------------------------------------------------

class EnqueueRules_Change :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnqueueRules.Change) */ {
 public:
  EnqueueRules_Change();
  virtual ~EnqueueRules_Change();

  EnqueueRules_Change(const EnqueueRules_Change& from);
  EnqueueRules_Change(EnqueueRules_Change&& from) noexcept
    : EnqueueRules_Change() {
    *this = ::std::move(from);
  }

  inline EnqueueRules_Change& operator=(const EnqueueRules_Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueRules_Change& operator=(EnqueueRules_Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueRules_Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueRules_Change* internal_default_instance() {
    return reinterpret_cast<const EnqueueRules_Change*>(
               &_EnqueueRules_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnqueueRules_Change& a, EnqueueRules_Change& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueRules_Change* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueRules_Change* New() const final {
    return CreateMaybeMessage<EnqueueRules_Change>(nullptr);
  }

  EnqueueRules_Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueRules_Change>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueRules_Change& from);
  void MergeFrom(const EnqueueRules_Change& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueRules_Change* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnqueueRules.Change";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
    return ::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 4,
    kMethodFieldNumber = 1,
    kReporterFieldNumber = 2,
    kQueueFieldNumber = 3,
    kPriorityFieldNumber = 5,
  };
  // repeated string features = 4;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  const std::string& features(int index) const;
  std::string* mutable_features(int index);
  void set_features(int index, const std::string& value);
  void set_features(int index, std::string&& value);
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, size_t size);
  std::string* add_features();
  void add_features(const std::string& value);
  void add_features(std::string&& value);
  void add_features(const char* value);
  void add_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_features();
  private:
  const std::string& _internal_features(int index) const;
  std::string* _internal_add_features();
  public:

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string reporter = 2;
  void clear_reporter();
  const std::string& reporter() const;
  void set_reporter(const std::string& value);
  void set_reporter(std::string&& value);
  void set_reporter(const char* value);
  void set_reporter(const char* value, size_t size);
  std::string* mutable_reporter();
  std::string* release_reporter();
  void set_allocated_reporter(std::string* reporter);
  private:
  const std::string& _internal_reporter() const;
  void _internal_set_reporter(const std::string& value);
  std::string* _internal_mutable_reporter();
  public:

  // string queue = 3;
  void clear_queue();
  const std::string& queue() const;
  void set_queue(const std::string& value);
  void set_queue(std::string&& value);
  void set_queue(const char* value);
  void set_queue(const char* value, size_t size);
  std::string* mutable_queue();
  std::string* release_queue();
  void set_allocated_queue(std::string* queue);
  private:
  const std::string& _internal_queue() const;
  void _internal_set_queue(const std::string& value);
  std::string* _internal_mutable_queue();
  public:

  // int32 priority = 5;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EnqueueRules.Change)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
};
// -------------------------------------------------------------------

class EnqueueRules :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnqueueRules) */ {
 public:
  EnqueueRules();
  virtual ~EnqueueRules();

  EnqueueRules(const EnqueueRules& from);
  EnqueueRules(EnqueueRules&& from) noexcept
    : EnqueueRules() {
    *this = ::std::move(from);
  }

  inline EnqueueRules& operator=(const EnqueueRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueRules& operator=(EnqueueRules&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueRules* internal_default_instance() {
    return reinterpret_cast<const EnqueueRules*>(
               &_EnqueueRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnqueueRules& a, EnqueueRules& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueRules* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueRules* New() const final {
    return CreateMaybeMessage<EnqueueRules>(nullptr);
  }

  EnqueueRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueRules& from);
  void MergeFrom(const EnqueueRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnqueueRules";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
    return ::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnqueueRules_Change Change;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 6,
  };
  // repeated .EnqueueRules.Change changes = 6;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::EnqueueRules_Change* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRules_Change >*
      mutable_changes();
  private:
  const ::EnqueueRules_Change& _internal_changes(int index) const;
  ::EnqueueRules_Change* _internal_add_changes();
  public:
  const ::EnqueueRules_Change& changes(int index) const;
  ::EnqueueRules_Change* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRules_Change >&
      changes() const;

  // @@protoc_insertion_point(class_scope:EnqueueRules)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRules_Change > changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
};
// -------------------------------------------------------------------

class RoutingTargets :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoutingTargets) */ {
 public:
  RoutingTargets();
  virtual ~RoutingTargets();

  RoutingTargets(const RoutingTargets& from);
  RoutingTargets(RoutingTargets&& from) noexcept
    : RoutingTargets() {
    *this = ::std::move(from);
  }

  inline RoutingTargets& operator=(const RoutingTargets& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingTargets& operator=(RoutingTargets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingTargets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingTargets* internal_default_instance() {
    return reinterpret_cast<const RoutingTargets*>(
               &_RoutingTargets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutingTargets& a, RoutingTargets& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingTargets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingTargets* New() const final {
    return CreateMaybeMessage<RoutingTargets>(nullptr);
  }

  RoutingTargets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingTargets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingTargets& from);
  void MergeFrom(const RoutingTargets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingTargets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoutingTargets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
    return ::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoutingTargets_Severity Severity;
  static constexpr Severity S0 =
    RoutingTargets_Severity_S0;
  static constexpr Severity S1 =
    RoutingTargets_Severity_S1;
  static constexpr Severity S2 =
    RoutingTargets_Severity_S2;
  static constexpr Severity S3 =
    RoutingTargets_Severity_S3;
  static constexpr Severity S4 =
    RoutingTargets_Severity_S4;
  static inline bool Severity_IsValid(int value) {
    return RoutingTargets_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN =
    RoutingTargets_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX =
    RoutingTargets_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE =
    RoutingTargets_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Severity_descriptor() {
    return RoutingTargets_Severity_descriptor();
  }
  template<typename T>
  static inline const std::string& Severity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Severity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Severity_Name.");
    return RoutingTargets_Severity_Name(enum_t_value);
  }
  static inline bool Severity_Parse(const std::string& name,
      Severity* value) {
    return RoutingTargets_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFoundInFieldNumber = 2,
    kTargetedToFieldNumber = 6,
    kAddQueuesToRouteToFieldNumber = 8,
    kRemoveQueuesToRouteToFieldNumber = 9,
    kReporterFieldNumber = 4,
    kVerifierFieldNumber = 5,
    kSeverityFieldNumber = 1,
    kInProdFieldNumber = 3,
    kQueueIdFieldNumber = 7,
  };
  // repeated string found_in = 2;
  int found_in_size() const;
  private:
  int _internal_found_in_size() const;
  public:
  void clear_found_in();
  const std::string& found_in(int index) const;
  std::string* mutable_found_in(int index);
  void set_found_in(int index, const std::string& value);
  void set_found_in(int index, std::string&& value);
  void set_found_in(int index, const char* value);
  void set_found_in(int index, const char* value, size_t size);
  std::string* add_found_in();
  void add_found_in(const std::string& value);
  void add_found_in(std::string&& value);
  void add_found_in(const char* value);
  void add_found_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& found_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_found_in();
  private:
  const std::string& _internal_found_in(int index) const;
  std::string* _internal_add_found_in();
  public:

  // repeated string targeted_to = 6;
  int targeted_to_size() const;
  private:
  int _internal_targeted_to_size() const;
  public:
  void clear_targeted_to();
  const std::string& targeted_to(int index) const;
  std::string* mutable_targeted_to(int index);
  void set_targeted_to(int index, const std::string& value);
  void set_targeted_to(int index, std::string&& value);
  void set_targeted_to(int index, const char* value);
  void set_targeted_to(int index, const char* value, size_t size);
  std::string* add_targeted_to();
  void add_targeted_to(const std::string& value);
  void add_targeted_to(std::string&& value);
  void add_targeted_to(const char* value);
  void add_targeted_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targeted_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targeted_to();
  private:
  const std::string& _internal_targeted_to(int index) const;
  std::string* _internal_add_targeted_to();
  public:

  // repeated int64 add_queues_to_route_to = 8;
  int add_queues_to_route_to_size() const;
  private:
  int _internal_add_queues_to_route_to_size() const;
  public:
  void clear_add_queues_to_route_to();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_queues_to_route_to(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_add_queues_to_route_to() const;
  void _internal_add_add_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_add_queues_to_route_to();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 add_queues_to_route_to(int index) const;
  void set_add_queues_to_route_to(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_add_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      add_queues_to_route_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_add_queues_to_route_to();

  // repeated int64 remove_queues_to_route_to = 9;
  int remove_queues_to_route_to_size() const;
  private:
  int _internal_remove_queues_to_route_to_size() const;
  public:
  void clear_remove_queues_to_route_to();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remove_queues_to_route_to(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_remove_queues_to_route_to() const;
  void _internal_add_remove_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_remove_queues_to_route_to();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 remove_queues_to_route_to(int index) const;
  void set_remove_queues_to_route_to(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_remove_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      remove_queues_to_route_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_remove_queues_to_route_to();

  // string reporter = 4;
  void clear_reporter();
  const std::string& reporter() const;
  void set_reporter(const std::string& value);
  void set_reporter(std::string&& value);
  void set_reporter(const char* value);
  void set_reporter(const char* value, size_t size);
  std::string* mutable_reporter();
  std::string* release_reporter();
  void set_allocated_reporter(std::string* reporter);
  private:
  const std::string& _internal_reporter() const;
  void _internal_set_reporter(const std::string& value);
  std::string* _internal_mutable_reporter();
  public:

  // string verifier = 5;
  void clear_verifier();
  const std::string& verifier() const;
  void set_verifier(const std::string& value);
  void set_verifier(std::string&& value);
  void set_verifier(const char* value);
  void set_verifier(const char* value, size_t size);
  std::string* mutable_verifier();
  std::string* release_verifier();
  void set_allocated_verifier(std::string* verifier);
  private:
  const std::string& _internal_verifier() const;
  void _internal_set_verifier(const std::string& value);
  std::string* _internal_mutable_verifier();
  public:

  // .RoutingTargets.Severity severity = 1;
  void clear_severity();
  ::RoutingTargets_Severity severity() const;
  void set_severity(::RoutingTargets_Severity value);
  private:
  ::RoutingTargets_Severity _internal_severity() const;
  void _internal_set_severity(::RoutingTargets_Severity value);
  public:

  // bool in_prod = 3;
  void clear_in_prod();
  bool in_prod() const;
  void set_in_prod(bool value);
  private:
  bool _internal_in_prod() const;
  void _internal_set_in_prod(bool value);
  public:

  // int64 queue_id = 7;
  void clear_queue_id();
  ::PROTOBUF_NAMESPACE_ID::int64 queue_id() const;
  void set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_queue_id() const;
  void _internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RoutingTargets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> found_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targeted_to_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > add_queues_to_route_to_;
  mutable std::atomic<int> _add_queues_to_route_to_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > remove_queues_to_route_to_;
  mutable std::atomic<int> _remove_queues_to_route_to_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verifier_;
  int severity_;
  bool in_prod_;
  ::PROTOBUF_NAMESPACE_ID::int64 queue_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
};
// -------------------------------------------------------------------

class QueueInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueueInfo) */ {
 public:
  QueueInfo();
  virtual ~QueueInfo();

  QueueInfo(const QueueInfo& from);
  QueueInfo(QueueInfo&& from) noexcept
    : QueueInfo() {
    *this = ::std::move(from);
  }

  inline QueueInfo& operator=(const QueueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueInfo& operator=(QueueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueInfo* internal_default_instance() {
    return reinterpret_cast<const QueueInfo*>(
               &_QueueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueueInfo& a, QueueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueInfo* New() const final {
    return CreateMaybeMessage<QueueInfo>(nullptr);
  }

  QueueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueInfo& from);
  void MergeFrom(const QueueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueueInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto);
    return ::descriptor_table_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QueueInfo_Severity Severity;
  static constexpr Severity S0 =
    QueueInfo_Severity_S0;
  static constexpr Severity S1 =
    QueueInfo_Severity_S1;
  static constexpr Severity S2 =
    QueueInfo_Severity_S2;
  static constexpr Severity S3 =
    QueueInfo_Severity_S3;
  static constexpr Severity S4 =
    QueueInfo_Severity_S4;
  static inline bool Severity_IsValid(int value) {
    return QueueInfo_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN =
    QueueInfo_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX =
    QueueInfo_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE =
    QueueInfo_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Severity_descriptor() {
    return QueueInfo_Severity_descriptor();
  }
  template<typename T>
  static inline const std::string& Severity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Severity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Severity_Name.");
    return QueueInfo_Severity_Name(enum_t_value);
  }
  static inline bool Severity_Parse(const std::string& name,
      Severity* value) {
    return QueueInfo_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFoundInFieldNumber = 2,
    kTargetedToFieldNumber = 6,
    kReporterFieldNumber = 4,
    kVerifierFieldNumber = 5,
    kMdbGroupNameFieldNumber = 8,
    kOpsOwnerFieldNumber = 9,
    kGvoOwnerFieldNumber = 10,
    kTechOwnerFieldNumber = 11,
    kFragmentNameFieldNumber = 14,
    kQueueIdFieldNumber = 7,
    kSeverityFieldNumber = 1,
    kInProdFieldNumber = 3,
    kIsDashboardQueueFieldNumber = 12,
    kIsExperimentalReviewEnabledFieldNumber = 16,
    kReviewsPerItemFieldNumber = 13,
    kItemExpirySecFieldNumber = 15,
    kExperimentalProbabilityFieldNumber = 17,
  };
  // repeated string found_in = 2;
  int found_in_size() const;
  private:
  int _internal_found_in_size() const;
  public:
  void clear_found_in();
  const std::string& found_in(int index) const;
  std::string* mutable_found_in(int index);
  void set_found_in(int index, const std::string& value);
  void set_found_in(int index, std::string&& value);
  void set_found_in(int index, const char* value);
  void set_found_in(int index, const char* value, size_t size);
  std::string* add_found_in();
  void add_found_in(const std::string& value);
  void add_found_in(std::string&& value);
  void add_found_in(const char* value);
  void add_found_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& found_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_found_in();
  private:
  const std::string& _internal_found_in(int index) const;
  std::string* _internal_add_found_in();
  public:

  // repeated string targeted_to = 6;
  int targeted_to_size() const;
  private:
  int _internal_targeted_to_size() const;
  public:
  void clear_targeted_to();
  const std::string& targeted_to(int index) const;
  std::string* mutable_targeted_to(int index);
  void set_targeted_to(int index, const std::string& value);
  void set_targeted_to(int index, std::string&& value);
  void set_targeted_to(int index, const char* value);
  void set_targeted_to(int index, const char* value, size_t size);
  std::string* add_targeted_to();
  void add_targeted_to(const std::string& value);
  void add_targeted_to(std::string&& value);
  void add_targeted_to(const char* value);
  void add_targeted_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targeted_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targeted_to();
  private:
  const std::string& _internal_targeted_to(int index) const;
  std::string* _internal_add_targeted_to();
  public:

  // string reporter = 4;
  void clear_reporter();
  const std::string& reporter() const;
  void set_reporter(const std::string& value);
  void set_reporter(std::string&& value);
  void set_reporter(const char* value);
  void set_reporter(const char* value, size_t size);
  std::string* mutable_reporter();
  std::string* release_reporter();
  void set_allocated_reporter(std::string* reporter);
  private:
  const std::string& _internal_reporter() const;
  void _internal_set_reporter(const std::string& value);
  std::string* _internal_mutable_reporter();
  public:

  // string verifier = 5;
  void clear_verifier();
  const std::string& verifier() const;
  void set_verifier(const std::string& value);
  void set_verifier(std::string&& value);
  void set_verifier(const char* value);
  void set_verifier(const char* value, size_t size);
  std::string* mutable_verifier();
  std::string* release_verifier();
  void set_allocated_verifier(std::string* verifier);
  private:
  const std::string& _internal_verifier() const;
  void _internal_set_verifier(const std::string& value);
  std::string* _internal_mutable_verifier();
  public:

  // string mdb_group_name = 8;
  void clear_mdb_group_name();
  const std::string& mdb_group_name() const;
  void set_mdb_group_name(const std::string& value);
  void set_mdb_group_name(std::string&& value);
  void set_mdb_group_name(const char* value);
  void set_mdb_group_name(const char* value, size_t size);
  std::string* mutable_mdb_group_name();
  std::string* release_mdb_group_name();
  void set_allocated_mdb_group_name(std::string* mdb_group_name);
  private:
  const std::string& _internal_mdb_group_name() const;
  void _internal_set_mdb_group_name(const std::string& value);
  std::string* _internal_mutable_mdb_group_name();
  public:

  // string ops_owner = 9;
  void clear_ops_owner();
  const std::string& ops_owner() const;
  void set_ops_owner(const std::string& value);
  void set_ops_owner(std::string&& value);
  void set_ops_owner(const char* value);
  void set_ops_owner(const char* value, size_t size);
  std::string* mutable_ops_owner();
  std::string* release_ops_owner();
  void set_allocated_ops_owner(std::string* ops_owner);
  private:
  const std::string& _internal_ops_owner() const;
  void _internal_set_ops_owner(const std::string& value);
  std::string* _internal_mutable_ops_owner();
  public:

  // string gvo_owner = 10;
  void clear_gvo_owner();
  const std::string& gvo_owner() const;
  void set_gvo_owner(const std::string& value);
  void set_gvo_owner(std::string&& value);
  void set_gvo_owner(const char* value);
  void set_gvo_owner(const char* value, size_t size);
  std::string* mutable_gvo_owner();
  std::string* release_gvo_owner();
  void set_allocated_gvo_owner(std::string* gvo_owner);
  private:
  const std::string& _internal_gvo_owner() const;
  void _internal_set_gvo_owner(const std::string& value);
  std::string* _internal_mutable_gvo_owner();
  public:

  // string tech_owner = 11;
  void clear_tech_owner();
  const std::string& tech_owner() const;
  void set_tech_owner(const std::string& value);
  void set_tech_owner(std::string&& value);
  void set_tech_owner(const char* value);
  void set_tech_owner(const char* value, size_t size);
  std::string* mutable_tech_owner();
  std::string* release_tech_owner();
  void set_allocated_tech_owner(std::string* tech_owner);
  private:
  const std::string& _internal_tech_owner() const;
  void _internal_set_tech_owner(const std::string& value);
  std::string* _internal_mutable_tech_owner();
  public:

  // string fragment_name = 14;
  void clear_fragment_name();
  const std::string& fragment_name() const;
  void set_fragment_name(const std::string& value);
  void set_fragment_name(std::string&& value);
  void set_fragment_name(const char* value);
  void set_fragment_name(const char* value, size_t size);
  std::string* mutable_fragment_name();
  std::string* release_fragment_name();
  void set_allocated_fragment_name(std::string* fragment_name);
  private:
  const std::string& _internal_fragment_name() const;
  void _internal_set_fragment_name(const std::string& value);
  std::string* _internal_mutable_fragment_name();
  public:

  // int64 queue_id = 7;
  void clear_queue_id();
  ::PROTOBUF_NAMESPACE_ID::int64 queue_id() const;
  void set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_queue_id() const;
  void _internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .QueueInfo.Severity severity = 1;
  void clear_severity();
  ::QueueInfo_Severity severity() const;
  void set_severity(::QueueInfo_Severity value);
  private:
  ::QueueInfo_Severity _internal_severity() const;
  void _internal_set_severity(::QueueInfo_Severity value);
  public:

  // bool in_prod = 3;
  void clear_in_prod();
  bool in_prod() const;
  void set_in_prod(bool value);
  private:
  bool _internal_in_prod() const;
  void _internal_set_in_prod(bool value);
  public:

  // bool is_dashboard_queue = 12;
  void clear_is_dashboard_queue();
  bool is_dashboard_queue() const;
  void set_is_dashboard_queue(bool value);
  private:
  bool _internal_is_dashboard_queue() const;
  void _internal_set_is_dashboard_queue(bool value);
  public:

  // bool is_experimental_review_enabled = 16;
  void clear_is_experimental_review_enabled();
  bool is_experimental_review_enabled() const;
  void set_is_experimental_review_enabled(bool value);
  private:
  bool _internal_is_experimental_review_enabled() const;
  void _internal_set_is_experimental_review_enabled(bool value);
  public:

  // int64 reviews_per_item = 13;
  void clear_reviews_per_item();
  ::PROTOBUF_NAMESPACE_ID::int64 reviews_per_item() const;
  void set_reviews_per_item(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reviews_per_item() const;
  void _internal_set_reviews_per_item(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 item_expiry_sec = 15;
  void clear_item_expiry_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 item_expiry_sec() const;
  void set_item_expiry_sec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_item_expiry_sec() const;
  void _internal_set_item_expiry_sec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 experimental_probability = 17;
  void clear_experimental_probability();
  ::PROTOBUF_NAMESPACE_ID::int64 experimental_probability() const;
  void set_experimental_probability(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_experimental_probability() const;
  void _internal_set_experimental_probability(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:QueueInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> found_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targeted_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdb_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ops_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gvo_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tech_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fragment_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 queue_id_;
  int severity_;
  bool in_prod_;
  bool is_dashboard_queue_;
  bool is_experimental_review_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 reviews_per_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 item_expiry_sec_;
  ::PROTOBUF_NAMESPACE_ID::int64 experimental_probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigChangeRequest

// .EnqueueRules enqueue_rules = 1;
inline bool ConfigChangeRequest::_internal_has_enqueue_rules() const {
  return ConfigType_case() == kEnqueueRules;
}
inline bool ConfigChangeRequest::has_enqueue_rules() const {
  return _internal_has_enqueue_rules();
}
inline void ConfigChangeRequest::set_has_enqueue_rules() {
  _oneof_case_[0] = kEnqueueRules;
}
inline void ConfigChangeRequest::clear_enqueue_rules() {
  if (_internal_has_enqueue_rules()) {
    delete ConfigType_.enqueue_rules_;
    clear_has_ConfigType();
  }
}
inline ::EnqueueRules* ConfigChangeRequest::release_enqueue_rules() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.enqueue_rules)
  if (_internal_has_enqueue_rules()) {
    clear_has_ConfigType();
      ::EnqueueRules* temp = ConfigType_.enqueue_rules_;
    ConfigType_.enqueue_rules_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EnqueueRules& ConfigChangeRequest::_internal_enqueue_rules() const {
  return _internal_has_enqueue_rules()
      ? *ConfigType_.enqueue_rules_
      : *reinterpret_cast< ::EnqueueRules*>(&::_EnqueueRules_default_instance_);
}
inline const ::EnqueueRules& ConfigChangeRequest::enqueue_rules() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.enqueue_rules)
  return _internal_enqueue_rules();
}
inline ::EnqueueRules* ConfigChangeRequest::_internal_mutable_enqueue_rules() {
  if (!_internal_has_enqueue_rules()) {
    clear_ConfigType();
    set_has_enqueue_rules();
    ConfigType_.enqueue_rules_ = CreateMaybeMessage< ::EnqueueRules >(
        GetArenaNoVirtual());
  }
  return ConfigType_.enqueue_rules_;
}
inline ::EnqueueRules* ConfigChangeRequest::mutable_enqueue_rules() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.enqueue_rules)
  return _internal_mutable_enqueue_rules();
}

// .RoutingTargets routing_targets = 2;
inline bool ConfigChangeRequest::_internal_has_routing_targets() const {
  return ConfigType_case() == kRoutingTargets;
}
inline bool ConfigChangeRequest::has_routing_targets() const {
  return _internal_has_routing_targets();
}
inline void ConfigChangeRequest::set_has_routing_targets() {
  _oneof_case_[0] = kRoutingTargets;
}
inline void ConfigChangeRequest::clear_routing_targets() {
  if (_internal_has_routing_targets()) {
    delete ConfigType_.routing_targets_;
    clear_has_ConfigType();
  }
}
inline ::RoutingTargets* ConfigChangeRequest::release_routing_targets() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.routing_targets)
  if (_internal_has_routing_targets()) {
    clear_has_ConfigType();
      ::RoutingTargets* temp = ConfigType_.routing_targets_;
    ConfigType_.routing_targets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RoutingTargets& ConfigChangeRequest::_internal_routing_targets() const {
  return _internal_has_routing_targets()
      ? *ConfigType_.routing_targets_
      : *reinterpret_cast< ::RoutingTargets*>(&::_RoutingTargets_default_instance_);
}
inline const ::RoutingTargets& ConfigChangeRequest::routing_targets() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.routing_targets)
  return _internal_routing_targets();
}
inline ::RoutingTargets* ConfigChangeRequest::_internal_mutable_routing_targets() {
  if (!_internal_has_routing_targets()) {
    clear_ConfigType();
    set_has_routing_targets();
    ConfigType_.routing_targets_ = CreateMaybeMessage< ::RoutingTargets >(
        GetArenaNoVirtual());
  }
  return ConfigType_.routing_targets_;
}
inline ::RoutingTargets* ConfigChangeRequest::mutable_routing_targets() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.routing_targets)
  return _internal_mutable_routing_targets();
}

// .QueueInfo queue_info = 3;
inline bool ConfigChangeRequest::_internal_has_queue_info() const {
  return ConfigType_case() == kQueueInfo;
}
inline bool ConfigChangeRequest::has_queue_info() const {
  return _internal_has_queue_info();
}
inline void ConfigChangeRequest::set_has_queue_info() {
  _oneof_case_[0] = kQueueInfo;
}
inline void ConfigChangeRequest::clear_queue_info() {
  if (_internal_has_queue_info()) {
    delete ConfigType_.queue_info_;
    clear_has_ConfigType();
  }
}
inline ::QueueInfo* ConfigChangeRequest::release_queue_info() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.queue_info)
  if (_internal_has_queue_info()) {
    clear_has_ConfigType();
      ::QueueInfo* temp = ConfigType_.queue_info_;
    ConfigType_.queue_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::QueueInfo& ConfigChangeRequest::_internal_queue_info() const {
  return _internal_has_queue_info()
      ? *ConfigType_.queue_info_
      : *reinterpret_cast< ::QueueInfo*>(&::_QueueInfo_default_instance_);
}
inline const ::QueueInfo& ConfigChangeRequest::queue_info() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.queue_info)
  return _internal_queue_info();
}
inline ::QueueInfo* ConfigChangeRequest::_internal_mutable_queue_info() {
  if (!_internal_has_queue_info()) {
    clear_ConfigType();
    set_has_queue_info();
    ConfigType_.queue_info_ = CreateMaybeMessage< ::QueueInfo >(
        GetArenaNoVirtual());
  }
  return ConfigType_.queue_info_;
}
inline ::QueueInfo* ConfigChangeRequest::mutable_queue_info() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.queue_info)
  return _internal_mutable_queue_info();
}

// string config_type = 4;
inline void ConfigChangeRequest::clear_config_type() {
  config_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigChangeRequest::config_type() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.config_type)
  return _internal_config_type();
}
inline void ConfigChangeRequest::set_config_type(const std::string& value) {
  _internal_set_config_type(value);
  // @@protoc_insertion_point(field_set:ConfigChangeRequest.config_type)
}
inline std::string* ConfigChangeRequest::mutable_config_type() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.config_type)
  return _internal_mutable_config_type();
}
inline const std::string& ConfigChangeRequest::_internal_config_type() const {
  return config_type_.GetNoArena();
}
inline void ConfigChangeRequest::_internal_set_config_type(const std::string& value) {
  
  config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigChangeRequest::set_config_type(std::string&& value) {
  
  config_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigChangeRequest.config_type)
}
inline void ConfigChangeRequest::set_config_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigChangeRequest.config_type)
}
inline void ConfigChangeRequest::set_config_type(const char* value, size_t size) {
  
  config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigChangeRequest.config_type)
}
inline std::string* ConfigChangeRequest::_internal_mutable_config_type() {
  
  return config_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigChangeRequest::release_config_type() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.config_type)
  
  return config_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChangeRequest::set_allocated_config_type(std::string* config_type) {
  if (config_type != nullptr) {
    
  } else {
    
  }
  config_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_type);
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.config_type)
}

// string issue_id = 5;
inline void ConfigChangeRequest::clear_issue_id() {
  issue_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigChangeRequest::issue_id() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.issue_id)
  return _internal_issue_id();
}
inline void ConfigChangeRequest::set_issue_id(const std::string& value) {
  _internal_set_issue_id(value);
  // @@protoc_insertion_point(field_set:ConfigChangeRequest.issue_id)
}
inline std::string* ConfigChangeRequest::mutable_issue_id() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.issue_id)
  return _internal_mutable_issue_id();
}
inline const std::string& ConfigChangeRequest::_internal_issue_id() const {
  return issue_id_.GetNoArena();
}
inline void ConfigChangeRequest::_internal_set_issue_id(const std::string& value) {
  
  issue_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigChangeRequest::set_issue_id(std::string&& value) {
  
  issue_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigChangeRequest.issue_id)
}
inline void ConfigChangeRequest::set_issue_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issue_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigChangeRequest.issue_id)
}
inline void ConfigChangeRequest::set_issue_id(const char* value, size_t size) {
  
  issue_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigChangeRequest.issue_id)
}
inline std::string* ConfigChangeRequest::_internal_mutable_issue_id() {
  
  return issue_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigChangeRequest::release_issue_id() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.issue_id)
  
  return issue_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChangeRequest::set_allocated_issue_id(std::string* issue_id) {
  if (issue_id != nullptr) {
    
  } else {
    
  }
  issue_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issue_id);
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.issue_id)
}

inline bool ConfigChangeRequest::has_ConfigType() const {
  return ConfigType_case() != CONFIGTYPE_NOT_SET;
}
inline void ConfigChangeRequest::clear_has_ConfigType() {
  _oneof_case_[0] = CONFIGTYPE_NOT_SET;
}
inline ConfigChangeRequest::ConfigTypeCase ConfigChangeRequest::ConfigType_case() const {
  return ConfigChangeRequest::ConfigTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnqueueRules_Change

// string method = 1;
inline void EnqueueRules_Change::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnqueueRules_Change::method() const {
  // @@protoc_insertion_point(field_get:EnqueueRules.Change.method)
  return _internal_method();
}
inline void EnqueueRules_Change::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.method)
}
inline std::string* EnqueueRules_Change::mutable_method() {
  // @@protoc_insertion_point(field_mutable:EnqueueRules.Change.method)
  return _internal_mutable_method();
}
inline const std::string& EnqueueRules_Change::_internal_method() const {
  return method_.GetNoArena();
}
inline void EnqueueRules_Change::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnqueueRules_Change::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnqueueRules.Change.method)
}
inline void EnqueueRules_Change::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnqueueRules.Change.method)
}
inline void EnqueueRules_Change::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnqueueRules.Change.method)
}
inline std::string* EnqueueRules_Change::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnqueueRules_Change::release_method() {
  // @@protoc_insertion_point(field_release:EnqueueRules.Change.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnqueueRules_Change::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:EnqueueRules.Change.method)
}

// string reporter = 2;
inline void EnqueueRules_Change::clear_reporter() {
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnqueueRules_Change::reporter() const {
  // @@protoc_insertion_point(field_get:EnqueueRules.Change.reporter)
  return _internal_reporter();
}
inline void EnqueueRules_Change::set_reporter(const std::string& value) {
  _internal_set_reporter(value);
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.reporter)
}
inline std::string* EnqueueRules_Change::mutable_reporter() {
  // @@protoc_insertion_point(field_mutable:EnqueueRules.Change.reporter)
  return _internal_mutable_reporter();
}
inline const std::string& EnqueueRules_Change::_internal_reporter() const {
  return reporter_.GetNoArena();
}
inline void EnqueueRules_Change::_internal_set_reporter(const std::string& value) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnqueueRules_Change::set_reporter(std::string&& value) {
  
  reporter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnqueueRules.Change.reporter)
}
inline void EnqueueRules_Change::set_reporter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnqueueRules.Change.reporter)
}
inline void EnqueueRules_Change::set_reporter(const char* value, size_t size) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnqueueRules.Change.reporter)
}
inline std::string* EnqueueRules_Change::_internal_mutable_reporter() {
  
  return reporter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnqueueRules_Change::release_reporter() {
  // @@protoc_insertion_point(field_release:EnqueueRules.Change.reporter)
  
  return reporter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnqueueRules_Change::set_allocated_reporter(std::string* reporter) {
  if (reporter != nullptr) {
    
  } else {
    
  }
  reporter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reporter);
  // @@protoc_insertion_point(field_set_allocated:EnqueueRules.Change.reporter)
}

// string queue = 3;
inline void EnqueueRules_Change::clear_queue() {
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnqueueRules_Change::queue() const {
  // @@protoc_insertion_point(field_get:EnqueueRules.Change.queue)
  return _internal_queue();
}
inline void EnqueueRules_Change::set_queue(const std::string& value) {
  _internal_set_queue(value);
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.queue)
}
inline std::string* EnqueueRules_Change::mutable_queue() {
  // @@protoc_insertion_point(field_mutable:EnqueueRules.Change.queue)
  return _internal_mutable_queue();
}
inline const std::string& EnqueueRules_Change::_internal_queue() const {
  return queue_.GetNoArena();
}
inline void EnqueueRules_Change::_internal_set_queue(const std::string& value) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnqueueRules_Change::set_queue(std::string&& value) {
  
  queue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnqueueRules.Change.queue)
}
inline void EnqueueRules_Change::set_queue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnqueueRules.Change.queue)
}
inline void EnqueueRules_Change::set_queue(const char* value, size_t size) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnqueueRules.Change.queue)
}
inline std::string* EnqueueRules_Change::_internal_mutable_queue() {
  
  return queue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnqueueRules_Change::release_queue() {
  // @@protoc_insertion_point(field_release:EnqueueRules.Change.queue)
  
  return queue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnqueueRules_Change::set_allocated_queue(std::string* queue) {
  if (queue != nullptr) {
    
  } else {
    
  }
  queue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue);
  // @@protoc_insertion_point(field_set_allocated:EnqueueRules.Change.queue)
}

// repeated string features = 4;
inline int EnqueueRules_Change::_internal_features_size() const {
  return features_.size();
}
inline int EnqueueRules_Change::features_size() const {
  return _internal_features_size();
}
inline void EnqueueRules_Change::clear_features() {
  features_.Clear();
}
inline std::string* EnqueueRules_Change::add_features() {
  // @@protoc_insertion_point(field_add_mutable:EnqueueRules.Change.features)
  return _internal_add_features();
}
inline const std::string& EnqueueRules_Change::_internal_features(int index) const {
  return features_.Get(index);
}
inline const std::string& EnqueueRules_Change::features(int index) const {
  // @@protoc_insertion_point(field_get:EnqueueRules.Change.features)
  return _internal_features(index);
}
inline std::string* EnqueueRules_Change::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:EnqueueRules.Change.features)
  return features_.Mutable(index);
}
inline void EnqueueRules_Change::set_features(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.features)
  features_.Mutable(index)->assign(value);
}
inline void EnqueueRules_Change::set_features(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.features)
  features_.Mutable(index)->assign(std::move(value));
}
inline void EnqueueRules_Change::set_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EnqueueRules.Change.features)
}
inline void EnqueueRules_Change::set_features(int index, const char* value, size_t size) {
  features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EnqueueRules.Change.features)
}
inline std::string* EnqueueRules_Change::_internal_add_features() {
  return features_.Add();
}
inline void EnqueueRules_Change::add_features(const std::string& value) {
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EnqueueRules.Change.features)
}
inline void EnqueueRules_Change::add_features(std::string&& value) {
  features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:EnqueueRules.Change.features)
}
inline void EnqueueRules_Change::add_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EnqueueRules.Change.features)
}
inline void EnqueueRules_Change::add_features(const char* value, size_t size) {
  features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EnqueueRules.Change.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnqueueRules_Change::features() const {
  // @@protoc_insertion_point(field_list:EnqueueRules.Change.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnqueueRules_Change::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:EnqueueRules.Change.features)
  return &features_;
}

// int32 priority = 5;
inline void EnqueueRules_Change::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnqueueRules_Change::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnqueueRules_Change::priority() const {
  // @@protoc_insertion_point(field_get:EnqueueRules.Change.priority)
  return _internal_priority();
}
inline void EnqueueRules_Change::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void EnqueueRules_Change::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:EnqueueRules.Change.priority)
}

// -------------------------------------------------------------------

// EnqueueRules

// repeated .EnqueueRules.Change changes = 6;
inline int EnqueueRules::_internal_changes_size() const {
  return changes_.size();
}
inline int EnqueueRules::changes_size() const {
  return _internal_changes_size();
}
inline void EnqueueRules::clear_changes() {
  changes_.Clear();
}
inline ::EnqueueRules_Change* EnqueueRules::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:EnqueueRules.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRules_Change >*
EnqueueRules::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:EnqueueRules.changes)
  return &changes_;
}
inline const ::EnqueueRules_Change& EnqueueRules::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::EnqueueRules_Change& EnqueueRules::changes(int index) const {
  // @@protoc_insertion_point(field_get:EnqueueRules.changes)
  return _internal_changes(index);
}
inline ::EnqueueRules_Change* EnqueueRules::_internal_add_changes() {
  return changes_.Add();
}
inline ::EnqueueRules_Change* EnqueueRules::add_changes() {
  // @@protoc_insertion_point(field_add:EnqueueRules.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRules_Change >&
EnqueueRules::changes() const {
  // @@protoc_insertion_point(field_list:EnqueueRules.changes)
  return changes_;
}

// -------------------------------------------------------------------

// RoutingTargets

// .RoutingTargets.Severity severity = 1;
inline void RoutingTargets::clear_severity() {
  severity_ = 0;
}
inline ::RoutingTargets_Severity RoutingTargets::_internal_severity() const {
  return static_cast< ::RoutingTargets_Severity >(severity_);
}
inline ::RoutingTargets_Severity RoutingTargets::severity() const {
  // @@protoc_insertion_point(field_get:RoutingTargets.severity)
  return _internal_severity();
}
inline void RoutingTargets::_internal_set_severity(::RoutingTargets_Severity value) {
  
  severity_ = value;
}
inline void RoutingTargets::set_severity(::RoutingTargets_Severity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:RoutingTargets.severity)
}

// repeated string found_in = 2;
inline int RoutingTargets::_internal_found_in_size() const {
  return found_in_.size();
}
inline int RoutingTargets::found_in_size() const {
  return _internal_found_in_size();
}
inline void RoutingTargets::clear_found_in() {
  found_in_.Clear();
}
inline std::string* RoutingTargets::add_found_in() {
  // @@protoc_insertion_point(field_add_mutable:RoutingTargets.found_in)
  return _internal_add_found_in();
}
inline const std::string& RoutingTargets::_internal_found_in(int index) const {
  return found_in_.Get(index);
}
inline const std::string& RoutingTargets::found_in(int index) const {
  // @@protoc_insertion_point(field_get:RoutingTargets.found_in)
  return _internal_found_in(index);
}
inline std::string* RoutingTargets::mutable_found_in(int index) {
  // @@protoc_insertion_point(field_mutable:RoutingTargets.found_in)
  return found_in_.Mutable(index);
}
inline void RoutingTargets::set_found_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RoutingTargets.found_in)
  found_in_.Mutable(index)->assign(value);
}
inline void RoutingTargets::set_found_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RoutingTargets.found_in)
  found_in_.Mutable(index)->assign(std::move(value));
}
inline void RoutingTargets::set_found_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  found_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RoutingTargets.found_in)
}
inline void RoutingTargets::set_found_in(int index, const char* value, size_t size) {
  found_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoutingTargets.found_in)
}
inline std::string* RoutingTargets::_internal_add_found_in() {
  return found_in_.Add();
}
inline void RoutingTargets::add_found_in(const std::string& value) {
  found_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RoutingTargets.found_in)
}
inline void RoutingTargets::add_found_in(std::string&& value) {
  found_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RoutingTargets.found_in)
}
inline void RoutingTargets::add_found_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  found_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RoutingTargets.found_in)
}
inline void RoutingTargets::add_found_in(const char* value, size_t size) {
  found_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RoutingTargets.found_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoutingTargets::found_in() const {
  // @@protoc_insertion_point(field_list:RoutingTargets.found_in)
  return found_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoutingTargets::mutable_found_in() {
  // @@protoc_insertion_point(field_mutable_list:RoutingTargets.found_in)
  return &found_in_;
}

// bool in_prod = 3;
inline void RoutingTargets::clear_in_prod() {
  in_prod_ = false;
}
inline bool RoutingTargets::_internal_in_prod() const {
  return in_prod_;
}
inline bool RoutingTargets::in_prod() const {
  // @@protoc_insertion_point(field_get:RoutingTargets.in_prod)
  return _internal_in_prod();
}
inline void RoutingTargets::_internal_set_in_prod(bool value) {
  
  in_prod_ = value;
}
inline void RoutingTargets::set_in_prod(bool value) {
  _internal_set_in_prod(value);
  // @@protoc_insertion_point(field_set:RoutingTargets.in_prod)
}

// string reporter = 4;
inline void RoutingTargets::clear_reporter() {
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoutingTargets::reporter() const {
  // @@protoc_insertion_point(field_get:RoutingTargets.reporter)
  return _internal_reporter();
}
inline void RoutingTargets::set_reporter(const std::string& value) {
  _internal_set_reporter(value);
  // @@protoc_insertion_point(field_set:RoutingTargets.reporter)
}
inline std::string* RoutingTargets::mutable_reporter() {
  // @@protoc_insertion_point(field_mutable:RoutingTargets.reporter)
  return _internal_mutable_reporter();
}
inline const std::string& RoutingTargets::_internal_reporter() const {
  return reporter_.GetNoArena();
}
inline void RoutingTargets::_internal_set_reporter(const std::string& value) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoutingTargets::set_reporter(std::string&& value) {
  
  reporter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoutingTargets.reporter)
}
inline void RoutingTargets::set_reporter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoutingTargets.reporter)
}
inline void RoutingTargets::set_reporter(const char* value, size_t size) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoutingTargets.reporter)
}
inline std::string* RoutingTargets::_internal_mutable_reporter() {
  
  return reporter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoutingTargets::release_reporter() {
  // @@protoc_insertion_point(field_release:RoutingTargets.reporter)
  
  return reporter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingTargets::set_allocated_reporter(std::string* reporter) {
  if (reporter != nullptr) {
    
  } else {
    
  }
  reporter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reporter);
  // @@protoc_insertion_point(field_set_allocated:RoutingTargets.reporter)
}

// string verifier = 5;
inline void RoutingTargets::clear_verifier() {
  verifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoutingTargets::verifier() const {
  // @@protoc_insertion_point(field_get:RoutingTargets.verifier)
  return _internal_verifier();
}
inline void RoutingTargets::set_verifier(const std::string& value) {
  _internal_set_verifier(value);
  // @@protoc_insertion_point(field_set:RoutingTargets.verifier)
}
inline std::string* RoutingTargets::mutable_verifier() {
  // @@protoc_insertion_point(field_mutable:RoutingTargets.verifier)
  return _internal_mutable_verifier();
}
inline const std::string& RoutingTargets::_internal_verifier() const {
  return verifier_.GetNoArena();
}
inline void RoutingTargets::_internal_set_verifier(const std::string& value) {
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoutingTargets::set_verifier(std::string&& value) {
  
  verifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoutingTargets.verifier)
}
inline void RoutingTargets::set_verifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoutingTargets.verifier)
}
inline void RoutingTargets::set_verifier(const char* value, size_t size) {
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoutingTargets.verifier)
}
inline std::string* RoutingTargets::_internal_mutable_verifier() {
  
  return verifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoutingTargets::release_verifier() {
  // @@protoc_insertion_point(field_release:RoutingTargets.verifier)
  
  return verifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingTargets::set_allocated_verifier(std::string* verifier) {
  if (verifier != nullptr) {
    
  } else {
    
  }
  verifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verifier);
  // @@protoc_insertion_point(field_set_allocated:RoutingTargets.verifier)
}

// repeated string targeted_to = 6;
inline int RoutingTargets::_internal_targeted_to_size() const {
  return targeted_to_.size();
}
inline int RoutingTargets::targeted_to_size() const {
  return _internal_targeted_to_size();
}
inline void RoutingTargets::clear_targeted_to() {
  targeted_to_.Clear();
}
inline std::string* RoutingTargets::add_targeted_to() {
  // @@protoc_insertion_point(field_add_mutable:RoutingTargets.targeted_to)
  return _internal_add_targeted_to();
}
inline const std::string& RoutingTargets::_internal_targeted_to(int index) const {
  return targeted_to_.Get(index);
}
inline const std::string& RoutingTargets::targeted_to(int index) const {
  // @@protoc_insertion_point(field_get:RoutingTargets.targeted_to)
  return _internal_targeted_to(index);
}
inline std::string* RoutingTargets::mutable_targeted_to(int index) {
  // @@protoc_insertion_point(field_mutable:RoutingTargets.targeted_to)
  return targeted_to_.Mutable(index);
}
inline void RoutingTargets::set_targeted_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RoutingTargets.targeted_to)
  targeted_to_.Mutable(index)->assign(value);
}
inline void RoutingTargets::set_targeted_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RoutingTargets.targeted_to)
  targeted_to_.Mutable(index)->assign(std::move(value));
}
inline void RoutingTargets::set_targeted_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targeted_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RoutingTargets.targeted_to)
}
inline void RoutingTargets::set_targeted_to(int index, const char* value, size_t size) {
  targeted_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoutingTargets.targeted_to)
}
inline std::string* RoutingTargets::_internal_add_targeted_to() {
  return targeted_to_.Add();
}
inline void RoutingTargets::add_targeted_to(const std::string& value) {
  targeted_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RoutingTargets.targeted_to)
}
inline void RoutingTargets::add_targeted_to(std::string&& value) {
  targeted_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RoutingTargets.targeted_to)
}
inline void RoutingTargets::add_targeted_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targeted_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RoutingTargets.targeted_to)
}
inline void RoutingTargets::add_targeted_to(const char* value, size_t size) {
  targeted_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RoutingTargets.targeted_to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoutingTargets::targeted_to() const {
  // @@protoc_insertion_point(field_list:RoutingTargets.targeted_to)
  return targeted_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoutingTargets::mutable_targeted_to() {
  // @@protoc_insertion_point(field_mutable_list:RoutingTargets.targeted_to)
  return &targeted_to_;
}

// int64 queue_id = 7;
inline void RoutingTargets::clear_queue_id() {
  queue_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::_internal_queue_id() const {
  return queue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::queue_id() const {
  // @@protoc_insertion_point(field_get:RoutingTargets.queue_id)
  return _internal_queue_id();
}
inline void RoutingTargets::_internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  queue_id_ = value;
}
inline void RoutingTargets::set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_queue_id(value);
  // @@protoc_insertion_point(field_set:RoutingTargets.queue_id)
}

// repeated int64 add_queues_to_route_to = 8;
inline int RoutingTargets::_internal_add_queues_to_route_to_size() const {
  return add_queues_to_route_to_.size();
}
inline int RoutingTargets::add_queues_to_route_to_size() const {
  return _internal_add_queues_to_route_to_size();
}
inline void RoutingTargets::clear_add_queues_to_route_to() {
  add_queues_to_route_to_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::_internal_add_queues_to_route_to(int index) const {
  return add_queues_to_route_to_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::add_queues_to_route_to(int index) const {
  // @@protoc_insertion_point(field_get:RoutingTargets.add_queues_to_route_to)
  return _internal_add_queues_to_route_to(index);
}
inline void RoutingTargets::set_add_queues_to_route_to(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  add_queues_to_route_to_.Set(index, value);
  // @@protoc_insertion_point(field_set:RoutingTargets.add_queues_to_route_to)
}
inline void RoutingTargets::_internal_add_add_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  add_queues_to_route_to_.Add(value);
}
inline void RoutingTargets::add_add_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_add_queues_to_route_to(value);
  // @@protoc_insertion_point(field_add:RoutingTargets.add_queues_to_route_to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoutingTargets::_internal_add_queues_to_route_to() const {
  return add_queues_to_route_to_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoutingTargets::add_queues_to_route_to() const {
  // @@protoc_insertion_point(field_list:RoutingTargets.add_queues_to_route_to)
  return _internal_add_queues_to_route_to();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoutingTargets::_internal_mutable_add_queues_to_route_to() {
  return &add_queues_to_route_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoutingTargets::mutable_add_queues_to_route_to() {
  // @@protoc_insertion_point(field_mutable_list:RoutingTargets.add_queues_to_route_to)
  return _internal_mutable_add_queues_to_route_to();
}

// repeated int64 remove_queues_to_route_to = 9;
inline int RoutingTargets::_internal_remove_queues_to_route_to_size() const {
  return remove_queues_to_route_to_.size();
}
inline int RoutingTargets::remove_queues_to_route_to_size() const {
  return _internal_remove_queues_to_route_to_size();
}
inline void RoutingTargets::clear_remove_queues_to_route_to() {
  remove_queues_to_route_to_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::_internal_remove_queues_to_route_to(int index) const {
  return remove_queues_to_route_to_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingTargets::remove_queues_to_route_to(int index) const {
  // @@protoc_insertion_point(field_get:RoutingTargets.remove_queues_to_route_to)
  return _internal_remove_queues_to_route_to(index);
}
inline void RoutingTargets::set_remove_queues_to_route_to(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  remove_queues_to_route_to_.Set(index, value);
  // @@protoc_insertion_point(field_set:RoutingTargets.remove_queues_to_route_to)
}
inline void RoutingTargets::_internal_add_remove_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  remove_queues_to_route_to_.Add(value);
}
inline void RoutingTargets::add_remove_queues_to_route_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_remove_queues_to_route_to(value);
  // @@protoc_insertion_point(field_add:RoutingTargets.remove_queues_to_route_to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoutingTargets::_internal_remove_queues_to_route_to() const {
  return remove_queues_to_route_to_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoutingTargets::remove_queues_to_route_to() const {
  // @@protoc_insertion_point(field_list:RoutingTargets.remove_queues_to_route_to)
  return _internal_remove_queues_to_route_to();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoutingTargets::_internal_mutable_remove_queues_to_route_to() {
  return &remove_queues_to_route_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoutingTargets::mutable_remove_queues_to_route_to() {
  // @@protoc_insertion_point(field_mutable_list:RoutingTargets.remove_queues_to_route_to)
  return _internal_mutable_remove_queues_to_route_to();
}

// -------------------------------------------------------------------

// QueueInfo

// .QueueInfo.Severity severity = 1;
inline void QueueInfo::clear_severity() {
  severity_ = 0;
}
inline ::QueueInfo_Severity QueueInfo::_internal_severity() const {
  return static_cast< ::QueueInfo_Severity >(severity_);
}
inline ::QueueInfo_Severity QueueInfo::severity() const {
  // @@protoc_insertion_point(field_get:QueueInfo.severity)
  return _internal_severity();
}
inline void QueueInfo::_internal_set_severity(::QueueInfo_Severity value) {
  
  severity_ = value;
}
inline void QueueInfo::set_severity(::QueueInfo_Severity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:QueueInfo.severity)
}

// repeated string found_in = 2;
inline int QueueInfo::_internal_found_in_size() const {
  return found_in_.size();
}
inline int QueueInfo::found_in_size() const {
  return _internal_found_in_size();
}
inline void QueueInfo::clear_found_in() {
  found_in_.Clear();
}
inline std::string* QueueInfo::add_found_in() {
  // @@protoc_insertion_point(field_add_mutable:QueueInfo.found_in)
  return _internal_add_found_in();
}
inline const std::string& QueueInfo::_internal_found_in(int index) const {
  return found_in_.Get(index);
}
inline const std::string& QueueInfo::found_in(int index) const {
  // @@protoc_insertion_point(field_get:QueueInfo.found_in)
  return _internal_found_in(index);
}
inline std::string* QueueInfo::mutable_found_in(int index) {
  // @@protoc_insertion_point(field_mutable:QueueInfo.found_in)
  return found_in_.Mutable(index);
}
inline void QueueInfo::set_found_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.found_in)
  found_in_.Mutable(index)->assign(value);
}
inline void QueueInfo::set_found_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.found_in)
  found_in_.Mutable(index)->assign(std::move(value));
}
inline void QueueInfo::set_found_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  found_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueueInfo.found_in)
}
inline void QueueInfo::set_found_in(int index, const char* value, size_t size) {
  found_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.found_in)
}
inline std::string* QueueInfo::_internal_add_found_in() {
  return found_in_.Add();
}
inline void QueueInfo::add_found_in(const std::string& value) {
  found_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueueInfo.found_in)
}
inline void QueueInfo::add_found_in(std::string&& value) {
  found_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QueueInfo.found_in)
}
inline void QueueInfo::add_found_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  found_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueueInfo.found_in)
}
inline void QueueInfo::add_found_in(const char* value, size_t size) {
  found_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueueInfo.found_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueueInfo::found_in() const {
  // @@protoc_insertion_point(field_list:QueueInfo.found_in)
  return found_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueueInfo::mutable_found_in() {
  // @@protoc_insertion_point(field_mutable_list:QueueInfo.found_in)
  return &found_in_;
}

// bool in_prod = 3;
inline void QueueInfo::clear_in_prod() {
  in_prod_ = false;
}
inline bool QueueInfo::_internal_in_prod() const {
  return in_prod_;
}
inline bool QueueInfo::in_prod() const {
  // @@protoc_insertion_point(field_get:QueueInfo.in_prod)
  return _internal_in_prod();
}
inline void QueueInfo::_internal_set_in_prod(bool value) {
  
  in_prod_ = value;
}
inline void QueueInfo::set_in_prod(bool value) {
  _internal_set_in_prod(value);
  // @@protoc_insertion_point(field_set:QueueInfo.in_prod)
}

// string reporter = 4;
inline void QueueInfo::clear_reporter() {
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::reporter() const {
  // @@protoc_insertion_point(field_get:QueueInfo.reporter)
  return _internal_reporter();
}
inline void QueueInfo::set_reporter(const std::string& value) {
  _internal_set_reporter(value);
  // @@protoc_insertion_point(field_set:QueueInfo.reporter)
}
inline std::string* QueueInfo::mutable_reporter() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.reporter)
  return _internal_mutable_reporter();
}
inline const std::string& QueueInfo::_internal_reporter() const {
  return reporter_.GetNoArena();
}
inline void QueueInfo::_internal_set_reporter(const std::string& value) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_reporter(std::string&& value) {
  
  reporter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.reporter)
}
inline void QueueInfo::set_reporter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.reporter)
}
inline void QueueInfo::set_reporter(const char* value, size_t size) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.reporter)
}
inline std::string* QueueInfo::_internal_mutable_reporter() {
  
  return reporter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_reporter() {
  // @@protoc_insertion_point(field_release:QueueInfo.reporter)
  
  return reporter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_reporter(std::string* reporter) {
  if (reporter != nullptr) {
    
  } else {
    
  }
  reporter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reporter);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.reporter)
}

// string verifier = 5;
inline void QueueInfo::clear_verifier() {
  verifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::verifier() const {
  // @@protoc_insertion_point(field_get:QueueInfo.verifier)
  return _internal_verifier();
}
inline void QueueInfo::set_verifier(const std::string& value) {
  _internal_set_verifier(value);
  // @@protoc_insertion_point(field_set:QueueInfo.verifier)
}
inline std::string* QueueInfo::mutable_verifier() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.verifier)
  return _internal_mutable_verifier();
}
inline const std::string& QueueInfo::_internal_verifier() const {
  return verifier_.GetNoArena();
}
inline void QueueInfo::_internal_set_verifier(const std::string& value) {
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_verifier(std::string&& value) {
  
  verifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.verifier)
}
inline void QueueInfo::set_verifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.verifier)
}
inline void QueueInfo::set_verifier(const char* value, size_t size) {
  
  verifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.verifier)
}
inline std::string* QueueInfo::_internal_mutable_verifier() {
  
  return verifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_verifier() {
  // @@protoc_insertion_point(field_release:QueueInfo.verifier)
  
  return verifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_verifier(std::string* verifier) {
  if (verifier != nullptr) {
    
  } else {
    
  }
  verifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verifier);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.verifier)
}

// repeated string targeted_to = 6;
inline int QueueInfo::_internal_targeted_to_size() const {
  return targeted_to_.size();
}
inline int QueueInfo::targeted_to_size() const {
  return _internal_targeted_to_size();
}
inline void QueueInfo::clear_targeted_to() {
  targeted_to_.Clear();
}
inline std::string* QueueInfo::add_targeted_to() {
  // @@protoc_insertion_point(field_add_mutable:QueueInfo.targeted_to)
  return _internal_add_targeted_to();
}
inline const std::string& QueueInfo::_internal_targeted_to(int index) const {
  return targeted_to_.Get(index);
}
inline const std::string& QueueInfo::targeted_to(int index) const {
  // @@protoc_insertion_point(field_get:QueueInfo.targeted_to)
  return _internal_targeted_to(index);
}
inline std::string* QueueInfo::mutable_targeted_to(int index) {
  // @@protoc_insertion_point(field_mutable:QueueInfo.targeted_to)
  return targeted_to_.Mutable(index);
}
inline void QueueInfo::set_targeted_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.targeted_to)
  targeted_to_.Mutable(index)->assign(value);
}
inline void QueueInfo::set_targeted_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.targeted_to)
  targeted_to_.Mutable(index)->assign(std::move(value));
}
inline void QueueInfo::set_targeted_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targeted_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueueInfo.targeted_to)
}
inline void QueueInfo::set_targeted_to(int index, const char* value, size_t size) {
  targeted_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.targeted_to)
}
inline std::string* QueueInfo::_internal_add_targeted_to() {
  return targeted_to_.Add();
}
inline void QueueInfo::add_targeted_to(const std::string& value) {
  targeted_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueueInfo.targeted_to)
}
inline void QueueInfo::add_targeted_to(std::string&& value) {
  targeted_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QueueInfo.targeted_to)
}
inline void QueueInfo::add_targeted_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targeted_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueueInfo.targeted_to)
}
inline void QueueInfo::add_targeted_to(const char* value, size_t size) {
  targeted_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueueInfo.targeted_to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueueInfo::targeted_to() const {
  // @@protoc_insertion_point(field_list:QueueInfo.targeted_to)
  return targeted_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueueInfo::mutable_targeted_to() {
  // @@protoc_insertion_point(field_mutable_list:QueueInfo.targeted_to)
  return &targeted_to_;
}

// int64 queue_id = 7;
inline void QueueInfo::clear_queue_id() {
  queue_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::_internal_queue_id() const {
  return queue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::queue_id() const {
  // @@protoc_insertion_point(field_get:QueueInfo.queue_id)
  return _internal_queue_id();
}
inline void QueueInfo::_internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  queue_id_ = value;
}
inline void QueueInfo::set_queue_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_queue_id(value);
  // @@protoc_insertion_point(field_set:QueueInfo.queue_id)
}

// string mdb_group_name = 8;
inline void QueueInfo::clear_mdb_group_name() {
  mdb_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::mdb_group_name() const {
  // @@protoc_insertion_point(field_get:QueueInfo.mdb_group_name)
  return _internal_mdb_group_name();
}
inline void QueueInfo::set_mdb_group_name(const std::string& value) {
  _internal_set_mdb_group_name(value);
  // @@protoc_insertion_point(field_set:QueueInfo.mdb_group_name)
}
inline std::string* QueueInfo::mutable_mdb_group_name() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.mdb_group_name)
  return _internal_mutable_mdb_group_name();
}
inline const std::string& QueueInfo::_internal_mdb_group_name() const {
  return mdb_group_name_.GetNoArena();
}
inline void QueueInfo::_internal_set_mdb_group_name(const std::string& value) {
  
  mdb_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_mdb_group_name(std::string&& value) {
  
  mdb_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.mdb_group_name)
}
inline void QueueInfo::set_mdb_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mdb_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.mdb_group_name)
}
inline void QueueInfo::set_mdb_group_name(const char* value, size_t size) {
  
  mdb_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.mdb_group_name)
}
inline std::string* QueueInfo::_internal_mutable_mdb_group_name() {
  
  return mdb_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_mdb_group_name() {
  // @@protoc_insertion_point(field_release:QueueInfo.mdb_group_name)
  
  return mdb_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_mdb_group_name(std::string* mdb_group_name) {
  if (mdb_group_name != nullptr) {
    
  } else {
    
  }
  mdb_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdb_group_name);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.mdb_group_name)
}

// string ops_owner = 9;
inline void QueueInfo::clear_ops_owner() {
  ops_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::ops_owner() const {
  // @@protoc_insertion_point(field_get:QueueInfo.ops_owner)
  return _internal_ops_owner();
}
inline void QueueInfo::set_ops_owner(const std::string& value) {
  _internal_set_ops_owner(value);
  // @@protoc_insertion_point(field_set:QueueInfo.ops_owner)
}
inline std::string* QueueInfo::mutable_ops_owner() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.ops_owner)
  return _internal_mutable_ops_owner();
}
inline const std::string& QueueInfo::_internal_ops_owner() const {
  return ops_owner_.GetNoArena();
}
inline void QueueInfo::_internal_set_ops_owner(const std::string& value) {
  
  ops_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_ops_owner(std::string&& value) {
  
  ops_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.ops_owner)
}
inline void QueueInfo::set_ops_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ops_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.ops_owner)
}
inline void QueueInfo::set_ops_owner(const char* value, size_t size) {
  
  ops_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.ops_owner)
}
inline std::string* QueueInfo::_internal_mutable_ops_owner() {
  
  return ops_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_ops_owner() {
  // @@protoc_insertion_point(field_release:QueueInfo.ops_owner)
  
  return ops_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_ops_owner(std::string* ops_owner) {
  if (ops_owner != nullptr) {
    
  } else {
    
  }
  ops_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ops_owner);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.ops_owner)
}

// string gvo_owner = 10;
inline void QueueInfo::clear_gvo_owner() {
  gvo_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::gvo_owner() const {
  // @@protoc_insertion_point(field_get:QueueInfo.gvo_owner)
  return _internal_gvo_owner();
}
inline void QueueInfo::set_gvo_owner(const std::string& value) {
  _internal_set_gvo_owner(value);
  // @@protoc_insertion_point(field_set:QueueInfo.gvo_owner)
}
inline std::string* QueueInfo::mutable_gvo_owner() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.gvo_owner)
  return _internal_mutable_gvo_owner();
}
inline const std::string& QueueInfo::_internal_gvo_owner() const {
  return gvo_owner_.GetNoArena();
}
inline void QueueInfo::_internal_set_gvo_owner(const std::string& value) {
  
  gvo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_gvo_owner(std::string&& value) {
  
  gvo_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.gvo_owner)
}
inline void QueueInfo::set_gvo_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gvo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.gvo_owner)
}
inline void QueueInfo::set_gvo_owner(const char* value, size_t size) {
  
  gvo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.gvo_owner)
}
inline std::string* QueueInfo::_internal_mutable_gvo_owner() {
  
  return gvo_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_gvo_owner() {
  // @@protoc_insertion_point(field_release:QueueInfo.gvo_owner)
  
  return gvo_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_gvo_owner(std::string* gvo_owner) {
  if (gvo_owner != nullptr) {
    
  } else {
    
  }
  gvo_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gvo_owner);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.gvo_owner)
}

// string tech_owner = 11;
inline void QueueInfo::clear_tech_owner() {
  tech_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::tech_owner() const {
  // @@protoc_insertion_point(field_get:QueueInfo.tech_owner)
  return _internal_tech_owner();
}
inline void QueueInfo::set_tech_owner(const std::string& value) {
  _internal_set_tech_owner(value);
  // @@protoc_insertion_point(field_set:QueueInfo.tech_owner)
}
inline std::string* QueueInfo::mutable_tech_owner() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.tech_owner)
  return _internal_mutable_tech_owner();
}
inline const std::string& QueueInfo::_internal_tech_owner() const {
  return tech_owner_.GetNoArena();
}
inline void QueueInfo::_internal_set_tech_owner(const std::string& value) {
  
  tech_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_tech_owner(std::string&& value) {
  
  tech_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.tech_owner)
}
inline void QueueInfo::set_tech_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tech_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.tech_owner)
}
inline void QueueInfo::set_tech_owner(const char* value, size_t size) {
  
  tech_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.tech_owner)
}
inline std::string* QueueInfo::_internal_mutable_tech_owner() {
  
  return tech_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_tech_owner() {
  // @@protoc_insertion_point(field_release:QueueInfo.tech_owner)
  
  return tech_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_tech_owner(std::string* tech_owner) {
  if (tech_owner != nullptr) {
    
  } else {
    
  }
  tech_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tech_owner);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.tech_owner)
}

// bool is_dashboard_queue = 12;
inline void QueueInfo::clear_is_dashboard_queue() {
  is_dashboard_queue_ = false;
}
inline bool QueueInfo::_internal_is_dashboard_queue() const {
  return is_dashboard_queue_;
}
inline bool QueueInfo::is_dashboard_queue() const {
  // @@protoc_insertion_point(field_get:QueueInfo.is_dashboard_queue)
  return _internal_is_dashboard_queue();
}
inline void QueueInfo::_internal_set_is_dashboard_queue(bool value) {
  
  is_dashboard_queue_ = value;
}
inline void QueueInfo::set_is_dashboard_queue(bool value) {
  _internal_set_is_dashboard_queue(value);
  // @@protoc_insertion_point(field_set:QueueInfo.is_dashboard_queue)
}

// int64 reviews_per_item = 13;
inline void QueueInfo::clear_reviews_per_item() {
  reviews_per_item_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::_internal_reviews_per_item() const {
  return reviews_per_item_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::reviews_per_item() const {
  // @@protoc_insertion_point(field_get:QueueInfo.reviews_per_item)
  return _internal_reviews_per_item();
}
inline void QueueInfo::_internal_set_reviews_per_item(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reviews_per_item_ = value;
}
inline void QueueInfo::set_reviews_per_item(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reviews_per_item(value);
  // @@protoc_insertion_point(field_set:QueueInfo.reviews_per_item)
}

// string fragment_name = 14;
inline void QueueInfo::clear_fragment_name() {
  fragment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo::fragment_name() const {
  // @@protoc_insertion_point(field_get:QueueInfo.fragment_name)
  return _internal_fragment_name();
}
inline void QueueInfo::set_fragment_name(const std::string& value) {
  _internal_set_fragment_name(value);
  // @@protoc_insertion_point(field_set:QueueInfo.fragment_name)
}
inline std::string* QueueInfo::mutable_fragment_name() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.fragment_name)
  return _internal_mutable_fragment_name();
}
inline const std::string& QueueInfo::_internal_fragment_name() const {
  return fragment_name_.GetNoArena();
}
inline void QueueInfo::_internal_set_fragment_name(const std::string& value) {
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo::set_fragment_name(std::string&& value) {
  
  fragment_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.fragment_name)
}
inline void QueueInfo::set_fragment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.fragment_name)
}
inline void QueueInfo::set_fragment_name(const char* value, size_t size) {
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.fragment_name)
}
inline std::string* QueueInfo::_internal_mutable_fragment_name() {
  
  return fragment_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo::release_fragment_name() {
  // @@protoc_insertion_point(field_release:QueueInfo.fragment_name)
  
  return fragment_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo::set_allocated_fragment_name(std::string* fragment_name) {
  if (fragment_name != nullptr) {
    
  } else {
    
  }
  fragment_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fragment_name);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.fragment_name)
}

// int64 item_expiry_sec = 15;
inline void QueueInfo::clear_item_expiry_sec() {
  item_expiry_sec_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::_internal_item_expiry_sec() const {
  return item_expiry_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::item_expiry_sec() const {
  // @@protoc_insertion_point(field_get:QueueInfo.item_expiry_sec)
  return _internal_item_expiry_sec();
}
inline void QueueInfo::_internal_set_item_expiry_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  item_expiry_sec_ = value;
}
inline void QueueInfo::set_item_expiry_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_item_expiry_sec(value);
  // @@protoc_insertion_point(field_set:QueueInfo.item_expiry_sec)
}

// bool is_experimental_review_enabled = 16;
inline void QueueInfo::clear_is_experimental_review_enabled() {
  is_experimental_review_enabled_ = false;
}
inline bool QueueInfo::_internal_is_experimental_review_enabled() const {
  return is_experimental_review_enabled_;
}
inline bool QueueInfo::is_experimental_review_enabled() const {
  // @@protoc_insertion_point(field_get:QueueInfo.is_experimental_review_enabled)
  return _internal_is_experimental_review_enabled();
}
inline void QueueInfo::_internal_set_is_experimental_review_enabled(bool value) {
  
  is_experimental_review_enabled_ = value;
}
inline void QueueInfo::set_is_experimental_review_enabled(bool value) {
  _internal_set_is_experimental_review_enabled(value);
  // @@protoc_insertion_point(field_set:QueueInfo.is_experimental_review_enabled)
}

// int64 experimental_probability = 17;
inline void QueueInfo::clear_experimental_probability() {
  experimental_probability_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::_internal_experimental_probability() const {
  return experimental_probability_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueueInfo::experimental_probability() const {
  // @@protoc_insertion_point(field_get:QueueInfo.experimental_probability)
  return _internal_experimental_probability();
}
inline void QueueInfo::_internal_set_experimental_probability(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  experimental_probability_ = value;
}
inline void QueueInfo::set_experimental_probability(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_experimental_probability(value);
  // @@protoc_insertion_point(field_set:QueueInfo.experimental_probability)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoutingTargets_Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoutingTargets_Severity>() {
  return ::RoutingTargets_Severity_descriptor();
}
template <> struct is_proto_enum< ::QueueInfo_Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QueueInfo_Severity>() {
  return ::QueueInfo_Severity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpp_5fsubscriber_2fproto_2fconfig_5fchange_2eproto
