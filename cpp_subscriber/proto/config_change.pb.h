// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_change.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fchange_2eproto;
class ConfigChangeRequest;
class ConfigChangeRequestDefaultTypeInternal;
extern ConfigChangeRequestDefaultTypeInternal _ConfigChangeRequest_default_instance_;
class EnqueueRule;
class EnqueueRuleDefaultTypeInternal;
extern EnqueueRuleDefaultTypeInternal _EnqueueRule_default_instance_;
class EnqueueRule_Change;
class EnqueueRule_ChangeDefaultTypeInternal;
extern EnqueueRule_ChangeDefaultTypeInternal _EnqueueRule_Change_default_instance_;
class QueueInfo;
class QueueInfoDefaultTypeInternal;
extern QueueInfoDefaultTypeInternal _QueueInfo_default_instance_;
class QueueInfo_Change;
class QueueInfo_ChangeDefaultTypeInternal;
extern QueueInfo_ChangeDefaultTypeInternal _QueueInfo_Change_default_instance_;
class RoutingRule;
class RoutingRuleDefaultTypeInternal;
extern RoutingRuleDefaultTypeInternal _RoutingRule_default_instance_;
class RoutingRule_Change;
class RoutingRule_ChangeDefaultTypeInternal;
extern RoutingRule_ChangeDefaultTypeInternal _RoutingRule_Change_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigChangeRequest* Arena::CreateMaybeMessage<::ConfigChangeRequest>(Arena*);
template<> ::EnqueueRule* Arena::CreateMaybeMessage<::EnqueueRule>(Arena*);
template<> ::EnqueueRule_Change* Arena::CreateMaybeMessage<::EnqueueRule_Change>(Arena*);
template<> ::QueueInfo* Arena::CreateMaybeMessage<::QueueInfo>(Arena*);
template<> ::QueueInfo_Change* Arena::CreateMaybeMessage<::QueueInfo_Change>(Arena*);
template<> ::RoutingRule* Arena::CreateMaybeMessage<::RoutingRule>(Arena*);
template<> ::RoutingRule_Change* Arena::CreateMaybeMessage<::RoutingRule_Change>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConfigChangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigChangeRequest) */ {
 public:
  ConfigChangeRequest();
  virtual ~ConfigChangeRequest();

  ConfigChangeRequest(const ConfigChangeRequest& from);
  ConfigChangeRequest(ConfigChangeRequest&& from) noexcept
    : ConfigChangeRequest() {
    *this = ::std::move(from);
  }

  inline ConfigChangeRequest& operator=(const ConfigChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigChangeRequest& operator=(ConfigChangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigChangeRequest& default_instance();

  enum ConfigTypeCase {
    kEnqueueRule = 1,
    kRoutingRule = 2,
    kQueueInfo = 3,
    CONFIGTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigChangeRequest*>(
               &_ConfigChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigChangeRequest& a, ConfigChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigChangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigChangeRequest* New() const final {
    return CreateMaybeMessage<ConfigChangeRequest>(nullptr);
  }

  ConfigChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigChangeRequest& from);
  void MergeFrom(const ConfigChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigChangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReporterFieldNumber = 4,
    kEnqueueRuleFieldNumber = 1,
    kRoutingRuleFieldNumber = 2,
    kQueueInfoFieldNumber = 3,
  };
  // string reporter = 4;
  void clear_reporter();
  const std::string& reporter() const;
  void set_reporter(const std::string& value);
  void set_reporter(std::string&& value);
  void set_reporter(const char* value);
  void set_reporter(const char* value, size_t size);
  std::string* mutable_reporter();
  std::string* release_reporter();
  void set_allocated_reporter(std::string* reporter);
  private:
  const std::string& _internal_reporter() const;
  void _internal_set_reporter(const std::string& value);
  std::string* _internal_mutable_reporter();
  public:

  // .EnqueueRule enqueue_rule = 1;
  bool has_enqueue_rule() const;
  private:
  bool _internal_has_enqueue_rule() const;
  public:
  void clear_enqueue_rule();
  const ::EnqueueRule& enqueue_rule() const;
  ::EnqueueRule* release_enqueue_rule();
  ::EnqueueRule* mutable_enqueue_rule();
  void set_allocated_enqueue_rule(::EnqueueRule* enqueue_rule);
  private:
  const ::EnqueueRule& _internal_enqueue_rule() const;
  ::EnqueueRule* _internal_mutable_enqueue_rule();
  public:

  // .RoutingRule routing_rule = 2;
  bool has_routing_rule() const;
  private:
  bool _internal_has_routing_rule() const;
  public:
  void clear_routing_rule();
  const ::RoutingRule& routing_rule() const;
  ::RoutingRule* release_routing_rule();
  ::RoutingRule* mutable_routing_rule();
  void set_allocated_routing_rule(::RoutingRule* routing_rule);
  private:
  const ::RoutingRule& _internal_routing_rule() const;
  ::RoutingRule* _internal_mutable_routing_rule();
  public:

  // .QueueInfo queue_info = 3;
  bool has_queue_info() const;
  private:
  bool _internal_has_queue_info() const;
  public:
  void clear_queue_info();
  const ::QueueInfo& queue_info() const;
  ::QueueInfo* release_queue_info();
  ::QueueInfo* mutable_queue_info();
  void set_allocated_queue_info(::QueueInfo* queue_info);
  private:
  const ::QueueInfo& _internal_queue_info() const;
  ::QueueInfo* _internal_mutable_queue_info();
  public:

  void clear_ConfigType();
  ConfigTypeCase ConfigType_case() const;
  // @@protoc_insertion_point(class_scope:ConfigChangeRequest)
 private:
  class _Internal;
  void set_has_enqueue_rule();
  void set_has_routing_rule();
  void set_has_queue_info();

  inline bool has_ConfigType() const;
  inline void clear_has_ConfigType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_;
  union ConfigTypeUnion {
    ConfigTypeUnion() {}
    ::EnqueueRule* enqueue_rule_;
    ::RoutingRule* routing_rule_;
    ::QueueInfo* queue_info_;
  } ConfigType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class EnqueueRule_Change :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnqueueRule.Change) */ {
 public:
  EnqueueRule_Change();
  virtual ~EnqueueRule_Change();

  EnqueueRule_Change(const EnqueueRule_Change& from);
  EnqueueRule_Change(EnqueueRule_Change&& from) noexcept
    : EnqueueRule_Change() {
    *this = ::std::move(from);
  }

  inline EnqueueRule_Change& operator=(const EnqueueRule_Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueRule_Change& operator=(EnqueueRule_Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueRule_Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueRule_Change* internal_default_instance() {
    return reinterpret_cast<const EnqueueRule_Change*>(
               &_EnqueueRule_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnqueueRule_Change& a, EnqueueRule_Change& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueRule_Change* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueRule_Change* New() const final {
    return CreateMaybeMessage<EnqueueRule_Change>(nullptr);
  }

  EnqueueRule_Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueRule_Change>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueRule_Change& from);
  void MergeFrom(const EnqueueRule_Change& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueRule_Change* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnqueueRule.Change";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 3,
    kMethodFieldNumber = 1,
    kQueueFieldNumber = 2,
    kPriorityFieldNumber = 4,
  };
  // repeated string features = 3;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  const std::string& features(int index) const;
  std::string* mutable_features(int index);
  void set_features(int index, const std::string& value);
  void set_features(int index, std::string&& value);
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, size_t size);
  std::string* add_features();
  void add_features(const std::string& value);
  void add_features(std::string&& value);
  void add_features(const char* value);
  void add_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_features();
  private:
  const std::string& _internal_features(int index) const;
  std::string* _internal_add_features();
  public:

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string queue = 2;
  void clear_queue();
  const std::string& queue() const;
  void set_queue(const std::string& value);
  void set_queue(std::string&& value);
  void set_queue(const char* value);
  void set_queue(const char* value, size_t size);
  std::string* mutable_queue();
  std::string* release_queue();
  void set_allocated_queue(std::string* queue);
  private:
  const std::string& _internal_queue() const;
  void _internal_set_queue(const std::string& value);
  std::string* _internal_mutable_queue();
  public:

  // int32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EnqueueRule.Change)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class EnqueueRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnqueueRule) */ {
 public:
  EnqueueRule();
  virtual ~EnqueueRule();

  EnqueueRule(const EnqueueRule& from);
  EnqueueRule(EnqueueRule&& from) noexcept
    : EnqueueRule() {
    *this = ::std::move(from);
  }

  inline EnqueueRule& operator=(const EnqueueRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueRule& operator=(EnqueueRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueRule* internal_default_instance() {
    return reinterpret_cast<const EnqueueRule*>(
               &_EnqueueRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnqueueRule& a, EnqueueRule& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueRule* New() const final {
    return CreateMaybeMessage<EnqueueRule>(nullptr);
  }

  EnqueueRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueRule& from);
  void MergeFrom(const EnqueueRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnqueueRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnqueueRule_Change Change;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 1,
  };
  // repeated .EnqueueRule.Change changes = 1;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::EnqueueRule_Change* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRule_Change >*
      mutable_changes();
  private:
  const ::EnqueueRule_Change& _internal_changes(int index) const;
  ::EnqueueRule_Change* _internal_add_changes();
  public:
  const ::EnqueueRule_Change& changes(int index) const;
  ::EnqueueRule_Change* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRule_Change >&
      changes() const;

  // @@protoc_insertion_point(class_scope:EnqueueRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRule_Change > changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class RoutingRule_Change :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoutingRule.Change) */ {
 public:
  RoutingRule_Change();
  virtual ~RoutingRule_Change();

  RoutingRule_Change(const RoutingRule_Change& from);
  RoutingRule_Change(RoutingRule_Change&& from) noexcept
    : RoutingRule_Change() {
    *this = ::std::move(from);
  }

  inline RoutingRule_Change& operator=(const RoutingRule_Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingRule_Change& operator=(RoutingRule_Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingRule_Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingRule_Change* internal_default_instance() {
    return reinterpret_cast<const RoutingRule_Change*>(
               &_RoutingRule_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutingRule_Change& a, RoutingRule_Change& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingRule_Change* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingRule_Change* New() const final {
    return CreateMaybeMessage<RoutingRule_Change>(nullptr);
  }

  RoutingRule_Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingRule_Change>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingRule_Change& from);
  void MergeFrom(const RoutingRule_Change& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingRule_Change* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoutingRule.Change";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossibleRoutesFieldNumber = 3,
    kMethodFieldNumber = 1,
    kQueueFieldNumber = 2,
  };
  // repeated string possible_routes = 3;
  int possible_routes_size() const;
  private:
  int _internal_possible_routes_size() const;
  public:
  void clear_possible_routes();
  const std::string& possible_routes(int index) const;
  std::string* mutable_possible_routes(int index);
  void set_possible_routes(int index, const std::string& value);
  void set_possible_routes(int index, std::string&& value);
  void set_possible_routes(int index, const char* value);
  void set_possible_routes(int index, const char* value, size_t size);
  std::string* add_possible_routes();
  void add_possible_routes(const std::string& value);
  void add_possible_routes(std::string&& value);
  void add_possible_routes(const char* value);
  void add_possible_routes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& possible_routes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_possible_routes();
  private:
  const std::string& _internal_possible_routes(int index) const;
  std::string* _internal_add_possible_routes();
  public:

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string queue = 2;
  void clear_queue();
  const std::string& queue() const;
  void set_queue(const std::string& value);
  void set_queue(std::string&& value);
  void set_queue(const char* value);
  void set_queue(const char* value, size_t size);
  std::string* mutable_queue();
  std::string* release_queue();
  void set_allocated_queue(std::string* queue);
  private:
  const std::string& _internal_queue() const;
  void _internal_set_queue(const std::string& value);
  std::string* _internal_mutable_queue();
  public:

  // @@protoc_insertion_point(class_scope:RoutingRule.Change)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> possible_routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class RoutingRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoutingRule) */ {
 public:
  RoutingRule();
  virtual ~RoutingRule();

  RoutingRule(const RoutingRule& from);
  RoutingRule(RoutingRule&& from) noexcept
    : RoutingRule() {
    *this = ::std::move(from);
  }

  inline RoutingRule& operator=(const RoutingRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingRule& operator=(RoutingRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingRule* internal_default_instance() {
    return reinterpret_cast<const RoutingRule*>(
               &_RoutingRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoutingRule& a, RoutingRule& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingRule* New() const final {
    return CreateMaybeMessage<RoutingRule>(nullptr);
  }

  RoutingRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingRule& from);
  void MergeFrom(const RoutingRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoutingRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoutingRule_Change Change;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 4,
  };
  // repeated .RoutingRule.Change changes = 4;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::RoutingRule_Change* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoutingRule_Change >*
      mutable_changes();
  private:
  const ::RoutingRule_Change& _internal_changes(int index) const;
  ::RoutingRule_Change* _internal_add_changes();
  public:
  const ::RoutingRule_Change& changes(int index) const;
  ::RoutingRule_Change* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoutingRule_Change >&
      changes() const;

  // @@protoc_insertion_point(class_scope:RoutingRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoutingRule_Change > changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class QueueInfo_Change :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueueInfo.Change) */ {
 public:
  QueueInfo_Change();
  virtual ~QueueInfo_Change();

  QueueInfo_Change(const QueueInfo_Change& from);
  QueueInfo_Change(QueueInfo_Change&& from) noexcept
    : QueueInfo_Change() {
    *this = ::std::move(from);
  }

  inline QueueInfo_Change& operator=(const QueueInfo_Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueInfo_Change& operator=(QueueInfo_Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueInfo_Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueInfo_Change* internal_default_instance() {
    return reinterpret_cast<const QueueInfo_Change*>(
               &_QueueInfo_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueueInfo_Change& a, QueueInfo_Change& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueInfo_Change* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueInfo_Change* New() const final {
    return CreateMaybeMessage<QueueInfo_Change>(nullptr);
  }

  QueueInfo_Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueInfo_Change>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueInfo_Change& from);
  void MergeFrom(const QueueInfo_Change& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueInfo_Change* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueueInfo.Change";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 3,
    kMethodFieldNumber = 1,
    kQueueFieldNumber = 2,
  };
  // repeated string owner = 3;
  int owner_size() const;
  private:
  int _internal_owner_size() const;
  public:
  void clear_owner();
  const std::string& owner(int index) const;
  std::string* mutable_owner(int index);
  void set_owner(int index, const std::string& value);
  void set_owner(int index, std::string&& value);
  void set_owner(int index, const char* value);
  void set_owner(int index, const char* value, size_t size);
  std::string* add_owner();
  void add_owner(const std::string& value);
  void add_owner(std::string&& value);
  void add_owner(const char* value);
  void add_owner(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& owner() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_owner();
  private:
  const std::string& _internal_owner(int index) const;
  std::string* _internal_add_owner();
  public:

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string queue = 2;
  void clear_queue();
  const std::string& queue() const;
  void set_queue(const std::string& value);
  void set_queue(std::string&& value);
  void set_queue(const char* value);
  void set_queue(const char* value, size_t size);
  std::string* mutable_queue();
  std::string* release_queue();
  void set_allocated_queue(std::string* queue);
  private:
  const std::string& _internal_queue() const;
  void _internal_set_queue(const std::string& value);
  std::string* _internal_mutable_queue();
  public:

  // @@protoc_insertion_point(class_scope:QueueInfo.Change)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// -------------------------------------------------------------------

class QueueInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueueInfo) */ {
 public:
  QueueInfo();
  virtual ~QueueInfo();

  QueueInfo(const QueueInfo& from);
  QueueInfo(QueueInfo&& from) noexcept
    : QueueInfo() {
    *this = ::std::move(from);
  }

  inline QueueInfo& operator=(const QueueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueInfo& operator=(QueueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueInfo* internal_default_instance() {
    return reinterpret_cast<const QueueInfo*>(
               &_QueueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueueInfo& a, QueueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueInfo* New() const final {
    return CreateMaybeMessage<QueueInfo>(nullptr);
  }

  QueueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueInfo& from);
  void MergeFrom(const QueueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueueInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fchange_2eproto);
    return ::descriptor_table_config_5fchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QueueInfo_Change Change;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 4,
  };
  // repeated .QueueInfo.Change changes = 4;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::QueueInfo_Change* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QueueInfo_Change >*
      mutable_changes();
  private:
  const ::QueueInfo_Change& _internal_changes(int index) const;
  ::QueueInfo_Change* _internal_add_changes();
  public:
  const ::QueueInfo_Change& changes(int index) const;
  ::QueueInfo_Change* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QueueInfo_Change >&
      changes() const;

  // @@protoc_insertion_point(class_scope:QueueInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QueueInfo_Change > changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigChangeRequest

// .EnqueueRule enqueue_rule = 1;
inline bool ConfigChangeRequest::_internal_has_enqueue_rule() const {
  return ConfigType_case() == kEnqueueRule;
}
inline bool ConfigChangeRequest::has_enqueue_rule() const {
  return _internal_has_enqueue_rule();
}
inline void ConfigChangeRequest::set_has_enqueue_rule() {
  _oneof_case_[0] = kEnqueueRule;
}
inline void ConfigChangeRequest::clear_enqueue_rule() {
  if (_internal_has_enqueue_rule()) {
    delete ConfigType_.enqueue_rule_;
    clear_has_ConfigType();
  }
}
inline ::EnqueueRule* ConfigChangeRequest::release_enqueue_rule() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.enqueue_rule)
  if (_internal_has_enqueue_rule()) {
    clear_has_ConfigType();
      ::EnqueueRule* temp = ConfigType_.enqueue_rule_;
    ConfigType_.enqueue_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EnqueueRule& ConfigChangeRequest::_internal_enqueue_rule() const {
  return _internal_has_enqueue_rule()
      ? *ConfigType_.enqueue_rule_
      : *reinterpret_cast< ::EnqueueRule*>(&::_EnqueueRule_default_instance_);
}
inline const ::EnqueueRule& ConfigChangeRequest::enqueue_rule() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.enqueue_rule)
  return _internal_enqueue_rule();
}
inline ::EnqueueRule* ConfigChangeRequest::_internal_mutable_enqueue_rule() {
  if (!_internal_has_enqueue_rule()) {
    clear_ConfigType();
    set_has_enqueue_rule();
    ConfigType_.enqueue_rule_ = CreateMaybeMessage< ::EnqueueRule >(
        GetArenaNoVirtual());
  }
  return ConfigType_.enqueue_rule_;
}
inline ::EnqueueRule* ConfigChangeRequest::mutable_enqueue_rule() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.enqueue_rule)
  return _internal_mutable_enqueue_rule();
}

// .RoutingRule routing_rule = 2;
inline bool ConfigChangeRequest::_internal_has_routing_rule() const {
  return ConfigType_case() == kRoutingRule;
}
inline bool ConfigChangeRequest::has_routing_rule() const {
  return _internal_has_routing_rule();
}
inline void ConfigChangeRequest::set_has_routing_rule() {
  _oneof_case_[0] = kRoutingRule;
}
inline void ConfigChangeRequest::clear_routing_rule() {
  if (_internal_has_routing_rule()) {
    delete ConfigType_.routing_rule_;
    clear_has_ConfigType();
  }
}
inline ::RoutingRule* ConfigChangeRequest::release_routing_rule() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.routing_rule)
  if (_internal_has_routing_rule()) {
    clear_has_ConfigType();
      ::RoutingRule* temp = ConfigType_.routing_rule_;
    ConfigType_.routing_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RoutingRule& ConfigChangeRequest::_internal_routing_rule() const {
  return _internal_has_routing_rule()
      ? *ConfigType_.routing_rule_
      : *reinterpret_cast< ::RoutingRule*>(&::_RoutingRule_default_instance_);
}
inline const ::RoutingRule& ConfigChangeRequest::routing_rule() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.routing_rule)
  return _internal_routing_rule();
}
inline ::RoutingRule* ConfigChangeRequest::_internal_mutable_routing_rule() {
  if (!_internal_has_routing_rule()) {
    clear_ConfigType();
    set_has_routing_rule();
    ConfigType_.routing_rule_ = CreateMaybeMessage< ::RoutingRule >(
        GetArenaNoVirtual());
  }
  return ConfigType_.routing_rule_;
}
inline ::RoutingRule* ConfigChangeRequest::mutable_routing_rule() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.routing_rule)
  return _internal_mutable_routing_rule();
}

// .QueueInfo queue_info = 3;
inline bool ConfigChangeRequest::_internal_has_queue_info() const {
  return ConfigType_case() == kQueueInfo;
}
inline bool ConfigChangeRequest::has_queue_info() const {
  return _internal_has_queue_info();
}
inline void ConfigChangeRequest::set_has_queue_info() {
  _oneof_case_[0] = kQueueInfo;
}
inline void ConfigChangeRequest::clear_queue_info() {
  if (_internal_has_queue_info()) {
    delete ConfigType_.queue_info_;
    clear_has_ConfigType();
  }
}
inline ::QueueInfo* ConfigChangeRequest::release_queue_info() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.queue_info)
  if (_internal_has_queue_info()) {
    clear_has_ConfigType();
      ::QueueInfo* temp = ConfigType_.queue_info_;
    ConfigType_.queue_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::QueueInfo& ConfigChangeRequest::_internal_queue_info() const {
  return _internal_has_queue_info()
      ? *ConfigType_.queue_info_
      : *reinterpret_cast< ::QueueInfo*>(&::_QueueInfo_default_instance_);
}
inline const ::QueueInfo& ConfigChangeRequest::queue_info() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.queue_info)
  return _internal_queue_info();
}
inline ::QueueInfo* ConfigChangeRequest::_internal_mutable_queue_info() {
  if (!_internal_has_queue_info()) {
    clear_ConfigType();
    set_has_queue_info();
    ConfigType_.queue_info_ = CreateMaybeMessage< ::QueueInfo >(
        GetArenaNoVirtual());
  }
  return ConfigType_.queue_info_;
}
inline ::QueueInfo* ConfigChangeRequest::mutable_queue_info() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.queue_info)
  return _internal_mutable_queue_info();
}

// string reporter = 4;
inline void ConfigChangeRequest::clear_reporter() {
  reporter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigChangeRequest::reporter() const {
  // @@protoc_insertion_point(field_get:ConfigChangeRequest.reporter)
  return _internal_reporter();
}
inline void ConfigChangeRequest::set_reporter(const std::string& value) {
  _internal_set_reporter(value);
  // @@protoc_insertion_point(field_set:ConfigChangeRequest.reporter)
}
inline std::string* ConfigChangeRequest::mutable_reporter() {
  // @@protoc_insertion_point(field_mutable:ConfigChangeRequest.reporter)
  return _internal_mutable_reporter();
}
inline const std::string& ConfigChangeRequest::_internal_reporter() const {
  return reporter_.GetNoArena();
}
inline void ConfigChangeRequest::_internal_set_reporter(const std::string& value) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigChangeRequest::set_reporter(std::string&& value) {
  
  reporter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigChangeRequest.reporter)
}
inline void ConfigChangeRequest::set_reporter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigChangeRequest.reporter)
}
inline void ConfigChangeRequest::set_reporter(const char* value, size_t size) {
  
  reporter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigChangeRequest.reporter)
}
inline std::string* ConfigChangeRequest::_internal_mutable_reporter() {
  
  return reporter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigChangeRequest::release_reporter() {
  // @@protoc_insertion_point(field_release:ConfigChangeRequest.reporter)
  
  return reporter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChangeRequest::set_allocated_reporter(std::string* reporter) {
  if (reporter != nullptr) {
    
  } else {
    
  }
  reporter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reporter);
  // @@protoc_insertion_point(field_set_allocated:ConfigChangeRequest.reporter)
}

inline bool ConfigChangeRequest::has_ConfigType() const {
  return ConfigType_case() != CONFIGTYPE_NOT_SET;
}
inline void ConfigChangeRequest::clear_has_ConfigType() {
  _oneof_case_[0] = CONFIGTYPE_NOT_SET;
}
inline ConfigChangeRequest::ConfigTypeCase ConfigChangeRequest::ConfigType_case() const {
  return ConfigChangeRequest::ConfigTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnqueueRule_Change

// string method = 1;
inline void EnqueueRule_Change::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnqueueRule_Change::method() const {
  // @@protoc_insertion_point(field_get:EnqueueRule.Change.method)
  return _internal_method();
}
inline void EnqueueRule_Change::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:EnqueueRule.Change.method)
}
inline std::string* EnqueueRule_Change::mutable_method() {
  // @@protoc_insertion_point(field_mutable:EnqueueRule.Change.method)
  return _internal_mutable_method();
}
inline const std::string& EnqueueRule_Change::_internal_method() const {
  return method_.GetNoArena();
}
inline void EnqueueRule_Change::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnqueueRule_Change::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnqueueRule.Change.method)
}
inline void EnqueueRule_Change::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnqueueRule.Change.method)
}
inline void EnqueueRule_Change::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnqueueRule.Change.method)
}
inline std::string* EnqueueRule_Change::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnqueueRule_Change::release_method() {
  // @@protoc_insertion_point(field_release:EnqueueRule.Change.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnqueueRule_Change::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:EnqueueRule.Change.method)
}

// string queue = 2;
inline void EnqueueRule_Change::clear_queue() {
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnqueueRule_Change::queue() const {
  // @@protoc_insertion_point(field_get:EnqueueRule.Change.queue)
  return _internal_queue();
}
inline void EnqueueRule_Change::set_queue(const std::string& value) {
  _internal_set_queue(value);
  // @@protoc_insertion_point(field_set:EnqueueRule.Change.queue)
}
inline std::string* EnqueueRule_Change::mutable_queue() {
  // @@protoc_insertion_point(field_mutable:EnqueueRule.Change.queue)
  return _internal_mutable_queue();
}
inline const std::string& EnqueueRule_Change::_internal_queue() const {
  return queue_.GetNoArena();
}
inline void EnqueueRule_Change::_internal_set_queue(const std::string& value) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnqueueRule_Change::set_queue(std::string&& value) {
  
  queue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EnqueueRule.Change.queue)
}
inline void EnqueueRule_Change::set_queue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EnqueueRule.Change.queue)
}
inline void EnqueueRule_Change::set_queue(const char* value, size_t size) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EnqueueRule.Change.queue)
}
inline std::string* EnqueueRule_Change::_internal_mutable_queue() {
  
  return queue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnqueueRule_Change::release_queue() {
  // @@protoc_insertion_point(field_release:EnqueueRule.Change.queue)
  
  return queue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnqueueRule_Change::set_allocated_queue(std::string* queue) {
  if (queue != nullptr) {
    
  } else {
    
  }
  queue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue);
  // @@protoc_insertion_point(field_set_allocated:EnqueueRule.Change.queue)
}

// repeated string features = 3;
inline int EnqueueRule_Change::_internal_features_size() const {
  return features_.size();
}
inline int EnqueueRule_Change::features_size() const {
  return _internal_features_size();
}
inline void EnqueueRule_Change::clear_features() {
  features_.Clear();
}
inline std::string* EnqueueRule_Change::add_features() {
  // @@protoc_insertion_point(field_add_mutable:EnqueueRule.Change.features)
  return _internal_add_features();
}
inline const std::string& EnqueueRule_Change::_internal_features(int index) const {
  return features_.Get(index);
}
inline const std::string& EnqueueRule_Change::features(int index) const {
  // @@protoc_insertion_point(field_get:EnqueueRule.Change.features)
  return _internal_features(index);
}
inline std::string* EnqueueRule_Change::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:EnqueueRule.Change.features)
  return features_.Mutable(index);
}
inline void EnqueueRule_Change::set_features(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:EnqueueRule.Change.features)
  features_.Mutable(index)->assign(value);
}
inline void EnqueueRule_Change::set_features(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:EnqueueRule.Change.features)
  features_.Mutable(index)->assign(std::move(value));
}
inline void EnqueueRule_Change::set_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EnqueueRule.Change.features)
}
inline void EnqueueRule_Change::set_features(int index, const char* value, size_t size) {
  features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EnqueueRule.Change.features)
}
inline std::string* EnqueueRule_Change::_internal_add_features() {
  return features_.Add();
}
inline void EnqueueRule_Change::add_features(const std::string& value) {
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EnqueueRule.Change.features)
}
inline void EnqueueRule_Change::add_features(std::string&& value) {
  features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:EnqueueRule.Change.features)
}
inline void EnqueueRule_Change::add_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EnqueueRule.Change.features)
}
inline void EnqueueRule_Change::add_features(const char* value, size_t size) {
  features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EnqueueRule.Change.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnqueueRule_Change::features() const {
  // @@protoc_insertion_point(field_list:EnqueueRule.Change.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnqueueRule_Change::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:EnqueueRule.Change.features)
  return &features_;
}

// int32 priority = 4;
inline void EnqueueRule_Change::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnqueueRule_Change::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnqueueRule_Change::priority() const {
  // @@protoc_insertion_point(field_get:EnqueueRule.Change.priority)
  return _internal_priority();
}
inline void EnqueueRule_Change::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void EnqueueRule_Change::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:EnqueueRule.Change.priority)
}

// -------------------------------------------------------------------

// EnqueueRule

// repeated .EnqueueRule.Change changes = 1;
inline int EnqueueRule::_internal_changes_size() const {
  return changes_.size();
}
inline int EnqueueRule::changes_size() const {
  return _internal_changes_size();
}
inline void EnqueueRule::clear_changes() {
  changes_.Clear();
}
inline ::EnqueueRule_Change* EnqueueRule::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:EnqueueRule.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRule_Change >*
EnqueueRule::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:EnqueueRule.changes)
  return &changes_;
}
inline const ::EnqueueRule_Change& EnqueueRule::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::EnqueueRule_Change& EnqueueRule::changes(int index) const {
  // @@protoc_insertion_point(field_get:EnqueueRule.changes)
  return _internal_changes(index);
}
inline ::EnqueueRule_Change* EnqueueRule::_internal_add_changes() {
  return changes_.Add();
}
inline ::EnqueueRule_Change* EnqueueRule::add_changes() {
  // @@protoc_insertion_point(field_add:EnqueueRule.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EnqueueRule_Change >&
EnqueueRule::changes() const {
  // @@protoc_insertion_point(field_list:EnqueueRule.changes)
  return changes_;
}

// -------------------------------------------------------------------

// RoutingRule_Change

// string method = 1;
inline void RoutingRule_Change::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoutingRule_Change::method() const {
  // @@protoc_insertion_point(field_get:RoutingRule.Change.method)
  return _internal_method();
}
inline void RoutingRule_Change::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:RoutingRule.Change.method)
}
inline std::string* RoutingRule_Change::mutable_method() {
  // @@protoc_insertion_point(field_mutable:RoutingRule.Change.method)
  return _internal_mutable_method();
}
inline const std::string& RoutingRule_Change::_internal_method() const {
  return method_.GetNoArena();
}
inline void RoutingRule_Change::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoutingRule_Change::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoutingRule.Change.method)
}
inline void RoutingRule_Change::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoutingRule.Change.method)
}
inline void RoutingRule_Change::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoutingRule.Change.method)
}
inline std::string* RoutingRule_Change::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoutingRule_Change::release_method() {
  // @@protoc_insertion_point(field_release:RoutingRule.Change.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingRule_Change::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:RoutingRule.Change.method)
}

// string queue = 2;
inline void RoutingRule_Change::clear_queue() {
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoutingRule_Change::queue() const {
  // @@protoc_insertion_point(field_get:RoutingRule.Change.queue)
  return _internal_queue();
}
inline void RoutingRule_Change::set_queue(const std::string& value) {
  _internal_set_queue(value);
  // @@protoc_insertion_point(field_set:RoutingRule.Change.queue)
}
inline std::string* RoutingRule_Change::mutable_queue() {
  // @@protoc_insertion_point(field_mutable:RoutingRule.Change.queue)
  return _internal_mutable_queue();
}
inline const std::string& RoutingRule_Change::_internal_queue() const {
  return queue_.GetNoArena();
}
inline void RoutingRule_Change::_internal_set_queue(const std::string& value) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoutingRule_Change::set_queue(std::string&& value) {
  
  queue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoutingRule.Change.queue)
}
inline void RoutingRule_Change::set_queue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoutingRule.Change.queue)
}
inline void RoutingRule_Change::set_queue(const char* value, size_t size) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoutingRule.Change.queue)
}
inline std::string* RoutingRule_Change::_internal_mutable_queue() {
  
  return queue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoutingRule_Change::release_queue() {
  // @@protoc_insertion_point(field_release:RoutingRule.Change.queue)
  
  return queue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingRule_Change::set_allocated_queue(std::string* queue) {
  if (queue != nullptr) {
    
  } else {
    
  }
  queue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue);
  // @@protoc_insertion_point(field_set_allocated:RoutingRule.Change.queue)
}

// repeated string possible_routes = 3;
inline int RoutingRule_Change::_internal_possible_routes_size() const {
  return possible_routes_.size();
}
inline int RoutingRule_Change::possible_routes_size() const {
  return _internal_possible_routes_size();
}
inline void RoutingRule_Change::clear_possible_routes() {
  possible_routes_.Clear();
}
inline std::string* RoutingRule_Change::add_possible_routes() {
  // @@protoc_insertion_point(field_add_mutable:RoutingRule.Change.possible_routes)
  return _internal_add_possible_routes();
}
inline const std::string& RoutingRule_Change::_internal_possible_routes(int index) const {
  return possible_routes_.Get(index);
}
inline const std::string& RoutingRule_Change::possible_routes(int index) const {
  // @@protoc_insertion_point(field_get:RoutingRule.Change.possible_routes)
  return _internal_possible_routes(index);
}
inline std::string* RoutingRule_Change::mutable_possible_routes(int index) {
  // @@protoc_insertion_point(field_mutable:RoutingRule.Change.possible_routes)
  return possible_routes_.Mutable(index);
}
inline void RoutingRule_Change::set_possible_routes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RoutingRule.Change.possible_routes)
  possible_routes_.Mutable(index)->assign(value);
}
inline void RoutingRule_Change::set_possible_routes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RoutingRule.Change.possible_routes)
  possible_routes_.Mutable(index)->assign(std::move(value));
}
inline void RoutingRule_Change::set_possible_routes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  possible_routes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RoutingRule.Change.possible_routes)
}
inline void RoutingRule_Change::set_possible_routes(int index, const char* value, size_t size) {
  possible_routes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoutingRule.Change.possible_routes)
}
inline std::string* RoutingRule_Change::_internal_add_possible_routes() {
  return possible_routes_.Add();
}
inline void RoutingRule_Change::add_possible_routes(const std::string& value) {
  possible_routes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RoutingRule.Change.possible_routes)
}
inline void RoutingRule_Change::add_possible_routes(std::string&& value) {
  possible_routes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RoutingRule.Change.possible_routes)
}
inline void RoutingRule_Change::add_possible_routes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  possible_routes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RoutingRule.Change.possible_routes)
}
inline void RoutingRule_Change::add_possible_routes(const char* value, size_t size) {
  possible_routes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RoutingRule.Change.possible_routes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoutingRule_Change::possible_routes() const {
  // @@protoc_insertion_point(field_list:RoutingRule.Change.possible_routes)
  return possible_routes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoutingRule_Change::mutable_possible_routes() {
  // @@protoc_insertion_point(field_mutable_list:RoutingRule.Change.possible_routes)
  return &possible_routes_;
}

// -------------------------------------------------------------------

// RoutingRule

// repeated .RoutingRule.Change changes = 4;
inline int RoutingRule::_internal_changes_size() const {
  return changes_.size();
}
inline int RoutingRule::changes_size() const {
  return _internal_changes_size();
}
inline void RoutingRule::clear_changes() {
  changes_.Clear();
}
inline ::RoutingRule_Change* RoutingRule::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:RoutingRule.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoutingRule_Change >*
RoutingRule::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:RoutingRule.changes)
  return &changes_;
}
inline const ::RoutingRule_Change& RoutingRule::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::RoutingRule_Change& RoutingRule::changes(int index) const {
  // @@protoc_insertion_point(field_get:RoutingRule.changes)
  return _internal_changes(index);
}
inline ::RoutingRule_Change* RoutingRule::_internal_add_changes() {
  return changes_.Add();
}
inline ::RoutingRule_Change* RoutingRule::add_changes() {
  // @@protoc_insertion_point(field_add:RoutingRule.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoutingRule_Change >&
RoutingRule::changes() const {
  // @@protoc_insertion_point(field_list:RoutingRule.changes)
  return changes_;
}

// -------------------------------------------------------------------

// QueueInfo_Change

// string method = 1;
inline void QueueInfo_Change::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo_Change::method() const {
  // @@protoc_insertion_point(field_get:QueueInfo.Change.method)
  return _internal_method();
}
inline void QueueInfo_Change::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:QueueInfo.Change.method)
}
inline std::string* QueueInfo_Change::mutable_method() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.Change.method)
  return _internal_mutable_method();
}
inline const std::string& QueueInfo_Change::_internal_method() const {
  return method_.GetNoArena();
}
inline void QueueInfo_Change::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo_Change::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.Change.method)
}
inline void QueueInfo_Change::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.Change.method)
}
inline void QueueInfo_Change::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.Change.method)
}
inline std::string* QueueInfo_Change::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo_Change::release_method() {
  // @@protoc_insertion_point(field_release:QueueInfo.Change.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo_Change::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.Change.method)
}

// string queue = 2;
inline void QueueInfo_Change::clear_queue() {
  queue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueInfo_Change::queue() const {
  // @@protoc_insertion_point(field_get:QueueInfo.Change.queue)
  return _internal_queue();
}
inline void QueueInfo_Change::set_queue(const std::string& value) {
  _internal_set_queue(value);
  // @@protoc_insertion_point(field_set:QueueInfo.Change.queue)
}
inline std::string* QueueInfo_Change::mutable_queue() {
  // @@protoc_insertion_point(field_mutable:QueueInfo.Change.queue)
  return _internal_mutable_queue();
}
inline const std::string& QueueInfo_Change::_internal_queue() const {
  return queue_.GetNoArena();
}
inline void QueueInfo_Change::_internal_set_queue(const std::string& value) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueInfo_Change::set_queue(std::string&& value) {
  
  queue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueueInfo.Change.queue)
}
inline void QueueInfo_Change::set_queue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueueInfo.Change.queue)
}
inline void QueueInfo_Change::set_queue(const char* value, size_t size) {
  
  queue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.Change.queue)
}
inline std::string* QueueInfo_Change::_internal_mutable_queue() {
  
  return queue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueInfo_Change::release_queue() {
  // @@protoc_insertion_point(field_release:QueueInfo.Change.queue)
  
  return queue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueInfo_Change::set_allocated_queue(std::string* queue) {
  if (queue != nullptr) {
    
  } else {
    
  }
  queue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue);
  // @@protoc_insertion_point(field_set_allocated:QueueInfo.Change.queue)
}

// repeated string owner = 3;
inline int QueueInfo_Change::_internal_owner_size() const {
  return owner_.size();
}
inline int QueueInfo_Change::owner_size() const {
  return _internal_owner_size();
}
inline void QueueInfo_Change::clear_owner() {
  owner_.Clear();
}
inline std::string* QueueInfo_Change::add_owner() {
  // @@protoc_insertion_point(field_add_mutable:QueueInfo.Change.owner)
  return _internal_add_owner();
}
inline const std::string& QueueInfo_Change::_internal_owner(int index) const {
  return owner_.Get(index);
}
inline const std::string& QueueInfo_Change::owner(int index) const {
  // @@protoc_insertion_point(field_get:QueueInfo.Change.owner)
  return _internal_owner(index);
}
inline std::string* QueueInfo_Change::mutable_owner(int index) {
  // @@protoc_insertion_point(field_mutable:QueueInfo.Change.owner)
  return owner_.Mutable(index);
}
inline void QueueInfo_Change::set_owner(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.Change.owner)
  owner_.Mutable(index)->assign(value);
}
inline void QueueInfo_Change::set_owner(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:QueueInfo.Change.owner)
  owner_.Mutable(index)->assign(std::move(value));
}
inline void QueueInfo_Change::set_owner(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueueInfo.Change.owner)
}
inline void QueueInfo_Change::set_owner(int index, const char* value, size_t size) {
  owner_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueueInfo.Change.owner)
}
inline std::string* QueueInfo_Change::_internal_add_owner() {
  return owner_.Add();
}
inline void QueueInfo_Change::add_owner(const std::string& value) {
  owner_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueueInfo.Change.owner)
}
inline void QueueInfo_Change::add_owner(std::string&& value) {
  owner_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QueueInfo.Change.owner)
}
inline void QueueInfo_Change::add_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueueInfo.Change.owner)
}
inline void QueueInfo_Change::add_owner(const char* value, size_t size) {
  owner_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueueInfo.Change.owner)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueueInfo_Change::owner() const {
  // @@protoc_insertion_point(field_list:QueueInfo.Change.owner)
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueueInfo_Change::mutable_owner() {
  // @@protoc_insertion_point(field_mutable_list:QueueInfo.Change.owner)
  return &owner_;
}

// -------------------------------------------------------------------

// QueueInfo

// repeated .QueueInfo.Change changes = 4;
inline int QueueInfo::_internal_changes_size() const {
  return changes_.size();
}
inline int QueueInfo::changes_size() const {
  return _internal_changes_size();
}
inline void QueueInfo::clear_changes() {
  changes_.Clear();
}
inline ::QueueInfo_Change* QueueInfo::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:QueueInfo.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QueueInfo_Change >*
QueueInfo::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:QueueInfo.changes)
  return &changes_;
}
inline const ::QueueInfo_Change& QueueInfo::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::QueueInfo_Change& QueueInfo::changes(int index) const {
  // @@protoc_insertion_point(field_get:QueueInfo.changes)
  return _internal_changes(index);
}
inline ::QueueInfo_Change* QueueInfo::_internal_add_changes() {
  return changes_.Add();
}
inline ::QueueInfo_Change* QueueInfo::add_changes() {
  // @@protoc_insertion_point(field_add:QueueInfo.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QueueInfo_Change >&
QueueInfo::changes() const {
  // @@protoc_insertion_point(field_list:QueueInfo.changes)
  return changes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fchange_2eproto
